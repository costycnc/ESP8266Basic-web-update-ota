<!DOCTYPE html><html><head><title>ESP8266 Basic Help</title><link rel="shortcut icon" href="https://ssl.gstatic.com/docs/documents/images/kix-favicon7.ico"><meta name="referrer" content="strict-origin-when-cross-origin"><style type="text/css" nonce="cWoFW0lWBiJZaJ8dkfjjXA">
      @import url("https://fonts.googleapis.com/css?family=Google+Sans_old");
      @import url("https://fonts.googleapis.com/css?family=Roboto");

      body {
        font-family: Roboto, arial, sans, sans-serif;
        margin: 0;
      }

      iframe {
        border: 0;
        frameborder: 0;
        height: 100%;
        width: 100%;
      }

      #banners {
        align-items: center;
        background: white;
        display: block;
        justify-content: space-between;
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 100;
      }

      #banners #publish-banner {
        background-color: #e8f0fe;
        border-bottom: 1px #ccc solid;
        color: #202124;
        display: flex;
        flex: 1 1 0%;
        height: 60px;
        width: 100%;
      }

      #publish-banner-icon {
        display: flex;
        fill: #1967d2;
        margin: auto 20px;
      }

      #publish-banner-text {
        flex-grow: 1;
        margin: auto 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      #publish-banner-buttons {
        margin: auto 25px auto 0;
      }

      #publish-banner-buttons span {
        align-self: center;
        background-color: inherit;
        border: none;
        font-family: "Google Sans", Roboto, RobotoDraft, Helvetica, Arial, sans-serif;
        margin: 0 16px 0 32px;
      }

      #publish-banner-buttons a {
        color: #1967d2;
        cursor: pointer;
        font-family: "Google Sans", Roboto, RobotoDraft, Helvetica, Arial, sans-serif;
        font-size: 14px;
        font-weight: 500;
        line-height: 24px;
        text-decoration: none;
      }

      #banners #title-banner {
        background: white;
        border-bottom: 1px #ccc solid;
        display: flex;
        flex: 1 1 0%;
        height: 60px;
        width: 100%;
      }

      #banners #title-banner #title {
        flex-grow: 1;
        font-family: 'Google Sans';
        font-size: large;
        margin: auto 0 auto 20px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        width: 70%;
      }

      #banners #title-banner #interval {
        margin: auto 25px auto 0;
        font-family: Roboto;
        font-size: small;;
      }

      #footer {
        background: #f0f0f0;
        border-bottom: 1px #ccc solid;
        bottom: 0;
        font-family: Roboto;
        font-size: small;
        padding: 10px 10px;
        position: fixed;
        text-align: center;
        width: 100%;
      }

      #contents {
        padding: 100px 20% 50px 20%;
      }

      @media only screen and (max-device-width: 800px) {
        #banners #title-banner {
          border-bottom-width: 5px;
          height: auto;
          display: block;
        }

        #banners #title-banner #title {
          font-size: 3em;
          margin: auto 0 auto 20px;
          width: 90%;
        }

        #banners #title-banner #interval {
          font-size: 1.5em;
          margin: 10px 0 auto 25px;
        }

        #contents {
          padding: 150px 5% 80px;
        }

        #footer {
          font-size: 2em;
        }
      }

      .dash {
        padding: 0 6px;
      }
    </style></head><body><div id="banners"><div id="publish-banner"><span id="publish-banner-icon"><svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg></span><div id="publish-banner-text">Pubblicata utilizzando Documenti Google</div><div id="publish-banner-buttons"><span><a target="_blank" title="Learn more" href="https://support.google.com/docs/answer/183965">Ulteriori informazioni</a></span><span><a href="https://docs.google.com/u/0/abuse?id=1NMZvnnjZ5XNzkykINgYS_Ql6mQ3nJEAzYudbmScdiIg">Segnala una violazione</a></span></div></div><div id="title-banner"><div id="title">ESP8266 Basic Help</div><div id="interval"><span>Aggiornato automaticamente ogni 5 minuti</span></div></div></div><div id="contents"><style type="text/css">ol{margin:0;padding:0}table td,table th{padding:0}.c15{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:248.2pt;border-top-color:#000000;border-bottom-style:solid}.c24{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:276pt;border-top-color:#000000;border-bottom-style:solid}.c32{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:0pt;border-right-width:0pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:0pt;border-top-style:solid;border-left-style:solid;border-bottom-width:0pt;width:270pt;border-top-color:#000000;border-bottom-style:solid}.c1{-webkit-text-decoration-skip:none;color:#1155cc;font-weight:400;text-decoration:underline;vertical-align:baseline;text-decoration-skip-ink:none;font-size:11pt;font-family:"Courier New";font-style:normal}.c27{padding-top:0pt;padding-bottom:3pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:"Courier New";font-style:normal}.c16{padding-top:20pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c4{padding-top:18pt;padding-bottom:6pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c20{padding-top:0pt;padding-bottom:0pt;line-height:1.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}.c23{padding-top:0pt;padding-bottom:3pt;line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:center}.c39{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:right}.c25{background-color:#ecf0f1;color:#8d9aa5;text-decoration:none;vertical-align:baseline;font-size:10.5pt;font-style:normal}.c40{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-family:"Arial";font-style:normal}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c17{color:#000000;text-decoration:none;vertical-align:baseline;font-size:8pt;font-style:normal}.c30{color:#000000;text-decoration:none;vertical-align:baseline;font-size:18pt;font-style:normal}.c7{color:#000000;text-decoration:none;vertical-align:baseline;font-size:16pt;font-style:normal}.c13{color:#000000;text-decoration:none;vertical-align:baseline;font-size:26pt;font-style:normal}.c11{color:#000000;text-decoration:none;vertical-align:baseline;font-size:20pt;font-style:normal}.c31{color:#2a2a2a;text-decoration:none;vertical-align:baseline;font-size:10pt;font-style:normal}.c9{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:italic}.c38{padding-top:0pt;padding-bottom:0pt;line-height:1.0;text-align:left}.c8{-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline;text-decoration-skip-ink:none}.c22{border-spacing:0;border-collapse:collapse;margin-right:auto}.c35{margin-left:1.5pt;border-spacing:0;border-collapse:collapse;margin-right:auto}.c36{background-color:#ffffff;font-size:12pt;color:#222222}.c41{background-color:#ffffff;max-width:540pt;padding:36pt 36pt 36pt 36pt}.c14{color:inherit;text-decoration:inherit}.c5{font-weight:400;font-family:"Courier New"}.c42{background-color:#ffffff;font-size:10pt}.c18{font-weight:700;font-family:"Courier New"}.c19{font-size:36pt}.c26{font-size:11pt}.c10{margin-left:18pt}.c37{height:102pt}.c33{font-size:16pt}.c6{height:11pt}.c29{height:0pt}.c21{height:20pt}.c28{height:3pt}.c12{height:16pt}.c43{height:29pt}.c3{margin-left:36pt}.c34{font-size:8pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:"Arial"}p{margin:0;color:#000000;font-size:11pt;font-family:"Arial"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:"Arial";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style><div class="c41"><div><p class="c2 c6"><span class="c26 c40"></span></p><a id="t.901492f7b32d13af713dfcb762413bc821500d17"></a><a id="t.1"></a><table class="c22"><tbody><tr class="c29"><td class="c32" colspan="1" rowspan="1"><p class="c38"><span class="c0">ESP8266 BASIC Language Reference</span></p></td><td class="c32" colspan="1" rowspan="1"><p class="c6 c39"><span class="c0"></span></p></td></tr></tbody></table><p class="c2 c6"><span class="c0"></span></p></div><p class="c27 c6 title" id="h.dmjxrhkghtx5"><span class="c13 c5"></span></p><p class="c23 title" id="h.y8cvi9pr3cin"><span class="c5 c19">ESP8266 Basic Language Reference <br></span><span class="c5 c30">For ESP Basic 2.0 aXX</span></p><p class="c23 c6 title" id="h.os0k0hyev4oi"><span class="c13 c5"></span></p><p class="c23 c6 title" id="h.ae7phkzefdsx"><span class="c5 c13"></span></p><p class="c23 title" id="h.7seiw5q7o52d"><span class="c8 c5"><a class="c14" href="https://www.google.com/url?q=http://esp8266basic.com&amp;sa=D&amp;source=editors&amp;ust=1644194074447849&amp;usg=AOvVaw19OrJMtkK_y89o-ALCaoiN">HTTP://ESP8266BASIC.COM</a></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c5 c34">The MIT License (MIT)<br><br>Copyright (c) 2015 Michael Molinari<br><br>Permission is hereby granted, free of charge, to any person obtaining a copy<br>of this software and associated documentation files (the &quot;Software&quot;), to deal<br>in the Software without restriction, including without limitation the rights<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>copies of the Software, and to permit persons to whom the Software is<br>furnished to do so, subject to the following conditions:<br><br>The above copyright notice and this permission notice shall be included in all<br>copies or substantial portions of the Software.<br><br>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE<br>SOFTWARE.<br><br>Onewire tempture sensor code conntributed by Rotohammer.<br><br>Signnifigant speed improvements submited by cicciocb<br>Uploading of bas files improvement added by cicciocb<br>JSON parsing routine added by cicciocb</span></p><hr style="page-break-before:always;display:none;"><p class="c23 c6 title" id="h.x4exfijop8o7"><span class="c13 c5"></span></p><p class="c27 title" id="h.125na9mv3yv7"><span class="c13 c5">Table Of Contents</span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.7j6nhcj6p9fo">Hardware Basics (Node MCU Board)</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.me0q8j5y2xqe">ESP-01 BOARD</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.ourhqehsmlm4">BASE COMMANDS (Basic Core)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.bnqyizdjldd1">IF .. THEN:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.xklzopf5vx1f">DO...LOOP:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.sxgdlonr9ir2">LET:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.9i6k081j2smo">Comparison Operators:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.45iulaje2iwf">Math Operators:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.201nu1g0ztct">Logic Operators:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.sm94t5pxpgic">Boolean Operators:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.lft6rkjt02f6">DIM:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.ug0s53mjhcn4">UNDIM:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.oi9nb09n8dj6">GOTO:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.4eyo3bggeuan">GOSUB AND RETURN:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.biyiwgwf5ktq">FOR ... NEXT loops:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.rmkbza1j8y8r">BRANCH LABELS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.tqic5lhis0v3">PRINT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.cp4yz7n5cd4t">SERIALPRINT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.y1ooisy0ii8m">SERIALPRINTLN:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.i63vugl5oof8">BAUDRATE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.m5js14ome0zh">INPUT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.gzfslc760bo7">SERIALINPUT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.noxip0kf9z1i">SERIALFLUSH:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.iekxu7r5s4f">SERIALTIMEOUT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.ypgec3kh18cf">MEMCLEAR:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.5yc6x2ivllga">SERIAL PORT 2:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.mtizmi1msq1">SERIAL2BEGIN:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.6xmwvldi8wbl">SERIAL2END</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.tdk1talf8xr6">SERIAL2PRINT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.pjmbqz90xw1m">SERIAL2PRINTLN:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.goumua3xgn6y">SERIAL2INPUT:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.3uhdxoaphwl6">Timers And Interrupts</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.izur8d80h05">TIMER:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.q8gc0fbbkvnw">SLEEP:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.61iauy8epaaa">REBOOT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.s6fc9jg32xt4">INTERRUPT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.gnovtmhm2x8z">SERIALBRANCH:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.3x1rduexexn4">SERIAL2BRANCH:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.vuehf2kl2n08">FILE I/O</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.1nuy33lcvjtq">READ:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.j4dvjo86rd5w">WRITE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.p1f9jhmvmgzf">LOAD:</a></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c10 c6"><span class="c1"></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.1c77s012z9bb">HARDWARE INTERFACE COMMANDS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.6fvxdnz0myqt">PO:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.d8x7r1n0ampg">PI:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.ou7p7drtz7z5">PWO:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.v7ymoh2x1e79">PWI:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.cv3ch0meta59">SERVO:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.42c62vgpb0zt">AI:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.l63gzmo3cjv0">LASTSTAT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.ifa7768q34zs">TEMP:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.w1byijdhm4du">delay:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.63a112hevfah">gpio1reset:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.s4aqkogmp3f9">OLED &amp; LCD DISPLAY COMMANDS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.96una4govbb">OLEDPRINT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.lwpr5rqzej8q">OLEDCLS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.o2sawh6twkmx">OLEDSEND:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.kc66rfmhnx5z">LCDPRINT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.82iejumxa653">LCDCLS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.rxh3n863em8z">LCDBL:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.hwofhulnx7u2">LCDSEND:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.6zkk5om7lr8s">TFT ILI9341 display</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.48wyzb7eaxny">tft.setup(CS_PIN, DC_PIN, rotation)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.tjqwgshte5vg">tft.rgb(red, green, blue)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.enl42rxsni0k">tft.line(x1,y1,x2,y2,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.mn6eugzd05m1">tft.rect(x,y,w,h,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.54fe5w9spnbk">tft.rect.fill(x,y,w,h,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.5njrem34epop">tft.rect.round(x,y,w,h,rad,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.5cyygg12ttun">tft.rect.round.fill(x,y,w,h,rad,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.qxsda8ummrke">tft.circle(x,y,rad,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.kkjqrbsjazg">tft.circle.fill(x,y,rad,col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.k4aytq4hsugi">tft.text.color(col)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.mbvdkat8kz3t">tft.text.cursor(x,y)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.xufkspsf3sah">tft.text.size(size)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.p4xt3eo6reb3">tft.print(txt)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2rrqkhqc2uk5">tft.println(txt)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.44okc320b3y3">tft.demo()</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.trivwmndtwmo">FUNCTIONS (NEOPIXEL WS2812)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.hfuup9bibo6i">NEO.SETUP():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.xqgfhob0prfe">NEO():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.8lhhr218prih">NEO.CLS():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.oqyhug8ep4o1">NEO.STRIPCOLOR():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.7zr8hzhg43jb">(FUNCTIONS) DHT</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.5upcwy7yps0i">DHT.SETUP():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.j4u6frxxt7yf">DHT.TEMP():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.r2ozb7m9qmjr">DHT.HUM():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.tuelrldmgmxp">DHT.HEATINDEX():</a></span></p><p class="c2 c6"><span class="c1"></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.ypf2b3ae7cku">WEB INTERFACE COMMANDS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.bmmwiqkzzzn0">CLS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.gcnh6car4avy">WPRINT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.etfpkbj8gie7">WPRINT with htmlvar() function:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.c6pe2zkqmw5w">IMAGE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.lx0qlags7v5x">JAVASCRIPT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.oniqyyp5xtlt">CSS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.j9yqohiz69an">BUTTON:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.lczmg0xlj3vv">IMAGEBUTTON:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.9yfux1kqla9u">TEXTBOX:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.hv9ecql0q2rq">PASSWORDBOX:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.y9eksak5ntxl">SLIDER:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.42tlg267yum9">DROPDOWN:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.8vvjay37uon">LISTBOX:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.oclwm1pdhk4r">ONLOAD:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.9u0d4918itve">WAIT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.f5lixus9iftb">RETURNGUI:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.diqm6n3a0f2g">HTMLID():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.nw6ep3w7frt5">WEB MSG HANDLER COMMANDS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.j9u727taji0f">MSGBRANCH:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.m29uplf9c8z">MSGGET:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.l5ypyzhzez9f">MSGRETURN:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.syk5og313ap3">SMTP EMAIL COMMANDS</a></span></p><p class="c2 c3"><span class="c5 c8"><a class="c14" href="#h.rlbna0j5fs72">SETUPEMAIL:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.r4bh5nu1rqlm">EMAIL:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.fn26rcmo5y1f">WEB GRAPHICS COMMANDS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.iiclsogsf6jf">GRAPHICS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.y5q9szx6832y">GCLS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.nw3bukl6fjr7">LINE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.3ckuz88tp7w4">CIRCLE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.trp4ot6vql33">ELLIPSE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.uiareb2d6517">RECT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.jqedafa763qz">Color palette</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.ploelr1imkdf">WIFI COMMANDS</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.3kaig1z8w7vd">CONNECT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.7j1ewz758hkz">AP:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.arwwvog42mdi">WIFIOFF:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.i3e012flb2ca">WIFI.SCAN():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.pmesdancp2z6">WIFI.SSID():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.wmpb34i2ayfb">WIFI.RSSI():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.ku8x75ot4ppv">FUNCTIONS (THINGSPEAK API)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.nlh2o2t87zyg">SENDTS:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.z6kw7m9kih7m">READTS:</a></span></p><p class="c2 c10 c6"><span class="c1"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c10 c6"><span class="c1"></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.p7hrivlovky">FUNCTIONS String</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.80ezj26efjk6">len():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.hs5xyn82qywp">instr():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.tot730njehj9">instrrev():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.f283gimyxxyt">mid():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.rr4r1pn3fx0t">left():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.op62g0ychruz">right():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2v20ztyx3ev3">str():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.oenq9b9d608r">replace():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.4bwh9t3fzr4z">chr():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.biy31bl5hutp">asc():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.pyb19oepqhyd">upper():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.q0v0c5f2lavb">lower():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.jowshaa5k53f">id():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2teptst116uw">version():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.ck8nmm2eba9w">word():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.7cqfuo5br3zj">json():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.9wow1ne3qbqd">ReadOpenWeather():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.g4qwdbs2k9fn">FUNCTIONS (Numeric)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.aasjnynd941">sqr():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.j9b7x1ajx5px">sin():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.wi1a90tbky4h">cos():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.adwgf7jqkmjg">tan():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.u05gpwh32rfh">log():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.x0wqc97cok8a">rnd():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.uwtwge4s0jfd">millis():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.7grao8vymzrb">int():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.h9qivkho9ac">val():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.rdn0inf7grg6">oct():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.uo4td83gbar">hex():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.9q8zlm9wfsrh">hextoint():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.yh2o7hxxi60p">ramfree():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.geo2leujgtul">flashfree():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.r7f0h8hizj42">Function inherited from the parser (c++ style)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.10na78uyyxbb">pow(x, y ):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.uk1tasxiz3v9">exp(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.b911ttqfaaif">asin(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.81wi107krtyg">acos(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.o5u1sw8mat25">atan(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.apj8pu39hor">atan2(x, y):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.kr61utj84kjf">abs(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.cb4wlu6v19j9">fabs(x)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.tj5wkxeudqzo">floor(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.82gmza3hfbcr">ceil(x):</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.yi4qbg27o873">round(x):</a></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c1"></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.4rb22aomj7jx">FUNCTIONS (Time&amp;Date)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.9x9te322o554">time():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2ov2qnievfvz">unixtime():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.f4z2o5d3z1tp">timesetup():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.pi4g8o5xev7c">FUNCTIONS (Web Related)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2asn2thorjr">wget():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.4hxahe1etg8g">ip():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.xn70uv9yilc8">FUNCTIONS I2C</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.o9kamrmfwc3u">i2c functions:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.wvlhow429y9t">i2c.begin():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.l3zfyxxyxb4p">i2c.write():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.c7ja5gcycrt5">i2c.end():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.ijfbajbw75ii">i2c.requestfrom():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.mccdbu9w5a5n">i2c.available():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.mv7qyjm86k1c">i2c.read():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.sq07505bcs4f">FUNCTIONS SPI</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.jm7p3va7mehv">spi.setup():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.1z734pgcoyir">spi.byte():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.kov3p4k3pg7g">spi.string():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.u1pksdq2k6wh">spi.hex():</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.b2n1e75wo9be">FUNCTIONS IR:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.xjqs4lmeefo8">IR RECEIVE:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.gn0q918s679z">IRBRANCH:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.gb3r4iunhdqp">ir.recv.setup(pin)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2rwzwhzd15q6">ir.recv.get()</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.i2usru3sut2a">ir.recv.full()</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.hoqmvjlfao7v">ir.recv.dump()</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.h8aszq113962">IR TRANSMIT:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.mm09km8f25n">For the moment only the Sony and the NEC coding are supported for the transmission.</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.xlx1y0tbd7ws">ir.send.setup(pin)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.shslisiwjlkk">ir.send.nec(code, nb_bits)</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.q2xp3mos81ty">ir.send.sony(code, nb_bits)</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.s2f9gnk1rfei">FUNCTIONS UDP:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.qji831aa7xtn">Udpbegin:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.pnqoj6bcswtu">Udpstop:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.gci6r1m9in0b">UdpbeginMultiCast:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.pnseely0i2e">Udpwrite:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.f5xtg4ss2k32">UdpwriteMultiCast:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.qa3x34y4sn3t">UdpReply:</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.8c1kmubw7gyr">UdpRead():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.2fhyh6srhpw1">UdpRemote():</a></span></p><p class="c2 c3"><span class="c8 c5"><a class="c14" href="#h.my6f48khi1c0">UdpBranch:</a></span></p><p class="c2 c10"><span class="c8 c5"><a class="c14" href="#h.99muj8p4d9zz">SPECIFICITY OF THE NEW PARSER</a></span></p><p class="c27 c6 title" id="h.elh68xyy59kp"><span class="c13 c5"></span></p><h1 class="c16" id="h.7j6nhcj6p9fo"><span class="c11 c5">Hardware Basics (Node MCU Board)</span></h1><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 624.00px; height: 453.74px;"><img alt="" src="https://docs.google.com/drawings/d/sYo8r3EgY2xq0tabORiJ31w/image?parent=1NMZvnnjZ5XNzkykINgYS_Ql6mQ3nJEAzYudbmScdiIg&amp;rev=242&amp;drawingRevisionAccessToken=F6QPZrrANxuojg&amp;h=453&amp;w=624&amp;ac=1" style="width: 624.00px; height: 453.74px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.me0q8j5y2xqe"><span class="c11 c5">ESP-01 BOARD</span></h1><p class="c27 title" id="h.jbyd8ubi3tc9"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 326.00px; height: 154.00px;"><img alt="" src="https://lh3.googleusercontent.com/NZszMUopjCBjMSBmL4LLGSqsjThVN_9JPjAE4pItb0P5M5somhnfK0Ou4yYAekx6wUwEMDea4lLob825IGP6JHrFed5BOEYPiHmULrLIzU6vakHOcLyzHenE8aH5Tb2CBHW7SvFA" style="width: 326.00px; height: 154.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span><hr style="page-break-before:always;display:none;"></p><h1 class="c16" id="h.ourhqehsmlm4"><span class="c5 c11">BASE COMMANDS (Basic Core)</span></h1><h2 class="c4" id="h.bnqyizdjldd1"><span class="c7 c5">IF .. THEN:</span></h2><p class="c2"><span class="c0">The if then command will compare 2 values or variables.</span></p><p class="c2"><span class="c0">To check if strings are equal to each other use ‘==’, for numbers use ‘=’.</span></p><p class="c2"><span class="c0">if {var or value} {=, ==,&gt;,&lt;,&lt;&gt;,&gt;=,&lt;=}, {var or value} then {statement to be executed if true} {else} {Statement if false}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">If then statements can now be split between multiple lines. The format shown below can be used.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">If bla = 5 then</span></p><p class="c2"><span class="c0">   Print “Bla is 5”</span></p><p class="c2"><span class="c0">Else</span></p><p class="c2"><span class="c0">   Print “bla is not 5”</span></p><p class="c2"><span class="c0">End if</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">The if can be nested as below :</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">if a &gt; b then</span></p><p class="c2"><span class="c0">  print &quot;a &gt; b&quot;</span></p><p class="c2"><span class="c0">  if b &gt;c then</span></p><p class="c2"><span class="c0">    print &quot;b &gt; c&quot;</span></p><p class="c2"><span class="c0">  else</span></p><p class="c2"><span class="c0">    print &quot;b &lt; c&quot;</span></p><p class="c2"><span class="c0">  end if</span></p><p class="c2"><span class="c0">else</span></p><p class="c2"><span class="c0">  print &quot;a &lt; b&quot;</span></p><p class="c2"><span class="c0">end if</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4 c12" id="h.25eeydwu852m"><span class="c5 c7"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.7ctil6acqefh"><span class="c7 c5"></span></h2><h2 class="c4" id="h.xklzopf5vx1f"><span class="c7 c5">DO...LOOP:</span></h2><p class="c2"><span class="c0">Will allow you to establish a loop that will either run infinitely or only if specified conditions are true.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">DO </span></p><p class="c2"><span class="c0">...</span></p><p class="c2"><span class="c0">LOOP {WHILE/UNTIL} {Condition to be evaluated}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">If you want do the loop infinite:</span></p><p class="c2"><span class="c0">Do</span></p><p class="c2"><span class="c0"> Print “Looping for eternity” </span></p><p class="c2"><span class="c0">Loop until 0</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Do loop with until condition:</span></p><p class="c2"><span class="c0">Do </span></p><p class="c2"><span class="c0"> bla = bla + 1</span></p><p class="c2"><span class="c0"> Print bla</span></p><p class="c2"><span class="c0">loop until bla &gt; 5</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Do loop with while condition:</span></p><p class="c2"><span class="c0">Do </span></p><p class="c2"><span class="c0"> Bla = bla + 1</span></p><p class="c2"><span class="c0"> Print bla</span></p><p class="c2"><span class="c0">Loop while bla &lt; 5</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4 c12" id="h.z2qc3oyxpakl"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.xxxnodtx8mx7"><span class="c7 c5"></span></h2><h2 class="c4" id="h.sxgdlonr9ir2"><span class="c7 c5">LET:</span></h2><p class="c2"><span class="c0">Let will perform math or string operations on a set of values or variables and place the result into a variable.</span></p><p class="c2"><span class="c0">To add strings together you must use the ‘&amp;’ symbol instead of the ‘+’</span></p><p class="c2"><span class="c0">Can also be used to evaluate logic operations like in the if then statement. If the result is true it will return a -1 otherwise a 0</span></p><p class="c2"><span class="c0">let {Result var} = {value or var} {operator *,/,+,-,^,&amp;} {value or var}</span></p><p class="c2"><span class="c0">let {Result var} = {value or var} {=, ==,&gt;,&lt;,&lt;&gt;,&lt;=,&gt;=} {value or var}</span></p><p class="c2"><span class="c0">Can also be used without the let statement</span></p><p class="c2"><span class="c0">bla = 5 + 5</span></p><p class="c2 c6"><span class="c0"></span></p><a id="t.261ed6447309fd965cf31c76dcc836c306d7619f"></a><a id="t.0"></a><table class="c35"><tbody><tr class="c29"><td class="c24" colspan="1" rowspan="1"><h2 class="c20" id="h.9i6k081j2smo"><span class="c18">Comparison </span><span class="c18">Operators:</span></h2></td><td class="c15" colspan="1" rowspan="1"><h2 class="c20" id="h.45iulaje2iwf"><span class="c18">Math Operators:</span></h2></td></tr><tr class="c37"><td class="c24" colspan="1" rowspan="1"><p class="c2"><span class="c17 c5">=   Equal for numbers</span></p><p class="c2"><span class="c17 c5">==  Equal for strings</span></p><p class="c2"><span class="c17 c5">&gt;   More than</span></p><p class="c2"><span class="c17 c5">&lt;   less than</span></p><p class="c2"><span class="c17 c5">&lt;&gt;  Not Equal</span></p><p class="c2"><span class="c17 c5">&gt;=  more than or equal</span></p><p class="c2"><span class="c17 c5">&lt;=  less than or equal</span></p></td><td class="c15" colspan="1" rowspan="1"><p class="c2"><span class="c17 c5">+  Add (Numbers Only)</span></p><p class="c2"><span class="c17 c5">-  Subtract</span></p><p class="c2"><span class="c17 c5">*  Multiply</span></p><p class="c2"><span class="c17 c5">/  Divide</span></p><p class="c2"><span class="c17 c5">^  To the power of</span></p><p class="c2"><span class="c17 c5">&amp;  Add (Text)</span></p><p class="c2"><span class="c17 c5">%  Modulo</span></p></td></tr><tr class="c43"><td class="c24" colspan="1" rowspan="1"><h2 class="c20" id="h.201nu1g0ztct"><span class="c7 c18">Logic Operators:</span></h2></td><td class="c15" colspan="1" rowspan="1"><h2 class="c20" id="h.sm94t5pxpgic"><span class="c18">Boolean Operators:</span></h2></td></tr><tr class="c28"><td class="c24" colspan="1" rowspan="1"><p class="c2"><span class="c17 c5">And  boolean ‘and’ (ex. If a=10 and b=20 then ..)</span></p><p class="c2"><span class="c17 c5">Or    boolean ‘or’ (ex. If a=10 or b=20 then ..)</span></p><p class="c2"><span class="c5 c17">Xor  boolean ‘xor’ (ex. If a=10 xor b=20 then ..)</span></p><p class="c2"><span class="c17 c5">Not  boolean ‘not’ (ex. If not (a=10)  then ..)</span></p><p class="c2"><span class="c17 c5">Any combination of these operators is allowed.</span></p><p class="c2"><span class="c17 c5">(ex. If (a=10 or b=20) and c=30 then</span></p></td><td class="c15" colspan="1" rowspan="1"><p class="c2"><span class="c17 c5">And boolean ‘and’ (ex. a = b and c)  </span></p><p class="c2"><span class="c17 c5">Or  boolean ‘or’ (ex. A = a or 16)</span></p><p class="c2"><span class="c17 c5">Xor boolean ‘xor’ (ex. A = b xor 255)</span></p><p class="c2"><span class="c17 c5">Not boolean ‘not’ (ex. A = not 15 )</span></p><p class="c2"><span class="c17 c5">&lt;&lt;  shift left   (ex. A = b &lt;&lt; 4)</span></p><p class="c2"><span class="c17 c5">&gt;&gt;  shift right (ex. A = b &gt;&gt; 8)</span></p></td></tr></tbody></table><h2 class="c4" id="h.lft6rkjt02f6"><span class="c7 c5">DIM:</span></h2><p class="c2"><span class="c0">Will dimension an array. Arrays dimensioned without the $ will be defined as numeric.</span></p><p class="c2"><span class="c0">Arrays defined with a $ will be defined as string.</span></p><p class="c2"><span class="c0">Arrays defines without the $ can be defined as string adding ‘as string’ at the end of the line.</span></p><p class="c2"><span class="c0">Can be used just like other variables. Can not  be used for gui widgets.</span></p><p class="c2"><span class="c0">dim araynumeric( {variable or numeric value} )</span></p><p class="c2"><span class="c0">dim arraystring$( {variable or numeric value} )</span></p><p class="c2"><span class="c0">Dim arraystring( {variable or numeric value} ) as string</span></p><h2 class="c4" id="h.ug0s53mjhcn4"><span class="c7 c5">UNDIM:</span></h2><p class="c2"><span class="c0">Will release memory used by an array</span></p><p class="c2"><span class="c0">undim arraystring$</span></p><h2 class="c4" id="h.oi9nb09n8dj6"><span class="c7 c5">GOTO:</span></h2><p class="c2"><span class="c0">Will jump to the branch label of your choice</span></p><p class="c2"><span class="c0">goto {label}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.4eyo3bggeuan"><span class="c7 c5">GOSUB AND RETURN:</span></h2><p class="c2"><span class="c0">Will jump to the branch label of your choice and allow you to return to the location you call the gosub from and continue executing code after the return command is executed. The gosub command has a stack of 255 return points so it is possible to gosub from inside a gosub.</span></p><p class="c2"><span class="c0">gosub {label}</span></p><p class="c2"><span class="c0">return</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.biyiwgwf5ktq"><span class="c7 c5">FOR ... NEXT loops:</span></h2><p class="c2"><span class="c0">A for ... next loop will loop x number of times.</span></p><p class="c2"><span class="c0">For x = 1 to 5 </span></p><p class="c2"><span class="c0">Print x</span></p><p class="c2"><span class="c0">Next x</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">A for ... next loop with optional step value.</span></p><p class="c2"><span class="c0">For x = 1 to 5 step 2</span></p><p class="c2"><span class="c0">Print x</span></p><p class="c2"><span class="c0">Next x</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">The step can be negative and not limited to integer.</span></p><p class="c2"><span class="c0">For x = 5 to 0 step -0.1</span></p><p class="c2"><span class="c0">Print x</span></p><p class="c2"><span class="c0">Next </span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">The variable after the next is optional.</span></p><h2 class="c4" id="h.rmkbza1j8y8r"><span class="c7 c5">BRANCH LABELS:</span></h2><p class="c2"><span class="c0">A branch label allows you to jump from one part of the program to another. It can be a single string of characters with no spaces.</span></p><p class="c2"><span class="c0">The  [ and ] are required to define a branch. </span></p><p class="c2"><span class="c5">[label] (branch labels like in qbasic. No colon required)</span><hr style="page-break-before:always;display:none;"></p><h2 class="c4" id="h.tqic5lhis0v3"><span class="c7 c5">PRINT:</span></h2><p class="c2"><span class="c0">Will output text or a variable to the serial interface and the browser with a new line.</span></p><p class="c2"><span class="c0">print {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.cp4yz7n5cd4t"><span class="c7 c5">SERIALPRINT:</span></h2><p class="c2"><span class="c0">Will output text or a variable to the serial interface only. No new line or added.</span></p><p class="c2"><span class="c0">serialprint {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.y1ooisy0ii8m"><span class="c7 c5">SERIALPRINTLN:</span></h2><p class="c2"><span class="c0">Will output text or a variable to the serial interface only. Will terminate with a new line.</span></p><p class="c2"><span class="c0">serialprintln {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.i63vugl5oof8"><span class="c7 c5">BAUDRATE:</span></h2><p class="c2"><span class="c0">Will set the baudrate for serial communications.</span></p><p class="c2"><span class="c0">baudrate {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.m5js14ome0zh"><span class="c7 c5">INPUT:</span></h2><p class="c2"><span class="c0">Will request input via serial from the user and place it into a variable. Variable doesn’t needs to be declared prior to request.</span></p><p class="c2"><span class="c0">input {optional string or var to display in prompt} {value or var}</span></p><h2 class="c4 c12" id="h.1n3n5gfz80g6"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.uw6giwmh9umn"><span class="c7 c5"></span></h2><h2 class="c4" id="h.gzfslc760bo7"><span class="c7 c5">SERIALINPUT:</span></h2><p class="c2"><span class="c0">Will get any data received from the serial port into the variable.</span></p><p class="c2"><span class="c0">Useful in combination with the command serialbranch (see example below)</span></p><p class="c2"><span class="c0">serialinput {variable}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.noxip0kf9z1i"><span class="c7 c5">SERIALFLUSH:</span></h2><p class="c2"><span class="c0">Will clear the serial input buffer. Discards all characters stored in the buffer. </span></p><p class="c2"><span class="c0">serialflush</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.iekxu7r5s4f"><span class="c7 c5">SERIALTIMEOUT:</span></h2><p class="c2"><span class="c0">Will cause the input command to return whatever is in the serial  buffer even if there is no CR LF. Specifying a value of 0 will disable the serial timeout. Any non-zero value will be the number of milliseconds it will wait before timing out on an input command. </span></p><p class="c2"><span class="c0">serialtimeout {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.ypgec3kh18cf"><span class="c7 c5">MEMCLEAR:</span></h2><p class="c2"><span class="c0">Will purge all of the variable used in a basic program from memory. </span></p><p class="c2"><span class="c0">memclear</span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16 c21" id="h.v7tsxq162ck"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.aa3tazfmfgmi"><span class="c11 c5"></span></h1><h1 class="c16" id="h.5yc6x2ivllga"><span class="c11 c5">SERIAL PORT 2:</span></h1><p class="c2"><span class="c0">A complete Serial Port #2 is available.</span></p><p class="c2"><span class="c0">This is now a software port so we can freely define the pins for the TX and the RX.</span></p><p class="c2"><span class="c0">The speed can be any value up to 115200. The format is fixed to 8N1.</span></p><p class="c2"><span class="c0">The TX and RX can be any valid pin (except GPIO16).</span></p><p class="c2"><span class="c5">If not defined, the default pins are GPIO2 (TX_pin) and GPIO12 (RX_pin)</span></p><h2 class="c4" id="h.mtizmi1msq1"><span class="c7 c5">SERIAL2BEGIN:</span></h2><p class="c2"><span class="c5">Open the serial port 2</span><span class="c0"> with the defined baudrate.</span></p><p class="c2"><span class="c5">It is optionally possible to define the pins associated with the TX and RX</span></p><p class="c2"><span class="c0">serial2begin {baudrate},{TX_pin},{RX_pin}</span></p><p class="c2"><span class="c0">Example : serial2begin 115200, 5 , 4</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.6xmwvldi8wbl"><span class="c7 c5">SERIAL2END</span></h2><p class="c2"><span class="c0">Close the serial port 2.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.tdk1talf8xr6"><span class="c7 c5">SERIAL2PRINT:</span></h2><p class="c2"><span class="c0">Will output text or a variable to the serial 2 interface only. No new line or added.</span></p><p class="c2"><span class="c0">serial2print {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.pjmbqz90xw1m"><span class="c7 c5">SERIAL2PRINTLN:</span></h2><p class="c2"><span class="c0">Will output text or a variable to the serial 2 interface only. Will terminate with a new line.</span></p><p class="c2"><span class="c0">serial2println {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.goumua3xgn6y"><span class="c7 c5">SERIAL2INPUT:</span></h2><p class="c2"><span class="c0">Will get any data received from the serial port 2 into the variable.</span></p><p class="c2"><span class="c0">Useful in combination with the command serial2branch (see example below)</span></p><p class="c2"><span class="c5">serial2input {variable}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.3uhdxoaphwl6"><span class="c11 c5">Timers And Interrupts</span></h1><h2 class="c4" id="h.izur8d80h05"><span class="c7 c5">TIMER:</span></h2><p class="c2"><span class="c0">The Timer command will allow you periodically run a branch. The branch must end with the wait command. Setting the timer to 0 will disable it.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">To Set timer:</span></p><p class="c2"><span class="c0">timer {string or var for wait time in milliseconds}, {branch label}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">To Disable timer:</span></p><p class="c2"><span class="c0">timer 0</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">The below example will check the status of the d3 pin (gpio 0) and will print a msg to the serial terminal each time it finds the pin high. If the button is pressed and the pin is pulled low it will disable the timer and display the msg that the timer has been disabled.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c9 c5">Print “timer example”</span></p><p class="c2"><span class="c9 c5">Timer 1000, [test]</span></p><p class="c2"><span class="c5 c9">Wait</span></p><p class="c2 c6"><span class="c9 c5"></span></p><p class="c2"><span class="c9 c5">[test]</span></p><p class="c2"><span class="c9 c5">If io(pi,d3) = 0 then</span></p><p class="c2"><span class="c9 c5">   Timer 0</span></p><p class="c2"><span class="c9 c5">   serialPrintln “timer has been disabled”</span></p><p class="c2"><span class="c9 c5">Else</span></p><p class="c2"><span class="c9 c5">   serialPrintln “Button connected to d3 (gpio 0) is high”</span></p><p class="c2"><span class="c9 c5">End if</span></p><p class="c2"><span class="c9 c5">wait</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4 c12" id="h.5ee929o7ndrz"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.xexrscjk6bwx"><span class="c7 c5"></span></h2><h2 class="c4" id="h.q8gc0fbbkvnw"><span class="c7 c5">SLEEP:</span></h2><p class="c2"><span class="c0">Will put device to sleep for a number of seconds. This will save power and allow for extended use on batteries.</span></p><p class="c2"><span class="c0">Things to note. Sleep mode will cause a full reboot of the device. It will start the device and run the default program from the beginning. It takes 30 seconds before the device starts the default program after reboot.</span></p><p class="c2"><span class="c0">GPIO16 needs to be tied to RST to wake from Sleep.</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 357.00px; height: 44.00px;"><img alt="" src="https://docs.google.com/drawings/d/sqvBUrDTtgC0Iroiw3GDkig/image?parent=1NMZvnnjZ5XNzkykINgYS_Ql6mQ3nJEAzYudbmScdiIg&amp;rev=31&amp;drawingRevisionAccessToken=KhFtgJvumIdkvg&amp;h=44&amp;w=357&amp;ac=1" style="width: 357.00px; height: 44.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c2"><span class="c0">sleep {value or var in seconds}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">To sleep for an hour look at the following example.</span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2"><span class="c0">Sleep 3600   ‘60 seconds x 60 minuets </span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.61iauy8epaaa"><span class="c7 c5">REBOOT:</span></h2><p class="c2"><span class="c0">Will reboot the device upon execution. </span></p><p class="c2"><span class="c0">reboot</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.s6fc9jg32xt4"><span class="c7 c5">INTERRUPT:</span></h2><p class="c2"><span class="c0">Will execute a specific branch when a pins status changes. The interrupt polling only occurs when the esp is waiting and useful for things like push buttons trigger events. The branch must end with the wait command.</span></p><p class="c2"><span class="c0">interrupt {pin no} {branch label}</span></p><p class="c2"><span class="c0">to disable an interrupt specify no branch label.</span></p><p class="c2"><span class="c0">interrupt {pin no}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4 c12" id="h.wggbpqkw6ou0"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.eqna7hmz8mr"><span class="c7 c5"></span></h2><h2 class="c4" id="h.gnovtmhm2x8z"><span class="c7 c5">SERIALBRANCH:</span></h2><p class="c2"><span class="c0">Defines a branch to be executed when serial input is received.</span></p><p class="c2"><span class="c0">serialbranch [branchLabel]</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Example</span></p><p class="c2"><span class="c0">serialbranch [serialin]<br>wait<br><br>[serialin]<br>serialinput zz$<br>Serialprint “received:”<br>serialprintln zz$<br>return</span></p><h2 class="c4" id="h.3x1rduexexn4"><span class="c7 c5">SERIAL2BRANCH:</span></h2><p class="c2"><span class="c0">Defines a branch to be executed when serial input is received on port #2.</span></p><p class="c2"><span class="c0">serial2branch [branchLabel]</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Example</span></p><p class="c2"><span class="c0">serial2branch [serial2in]</span></p><p class="c2"><span class="c0">wait</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">[serial2in]</span></p><p class="c2"><span class="c0">serial2input zz$</span></p><p class="c2"><span class="c0">Serial2print “received:”</span></p><p class="c2"><span class="c0">serial2println zz$</span></p><p class="c2"><span class="c0">return</span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16 c21" id="h.jq02g2d7sm5x"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.w6ylc81ob0tm"><span class="c11 c5"></span></h1><h1 class="c16" id="h.vuehf2kl2n08"><span class="c11 c5">FILE I/O</span></h1><h2 class="c4" id="h.1nuy33lcvjtq"><span class="c7 c5">READ:</span></h2><p class="c2"><span class="c0">The read command allows you to retrieve information persistently stored in the flash memory of the ESP8266 module.</span></p><p class="c2"><span class="c0">read {string or var for name of data element} {Var to place contents of data element into}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.j4dvjo86rd5w"><span class="c7 c5">WRITE:</span></h2><p class="c2"><span class="c0">The write command allows you to persistently store a data element in flash memory.</span></p><p class="c2"><span class="c0">write {string or var for name of data element} {Var or sting to write to data element}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.p1f9jhmvmgzf"><span class="c7 c5">LOAD:</span></h2><p class="c2"><span class="c0">Will load another basic program into memory. Useful for chaining programs together.</span></p><p class="c2"><span class="c0">Will load another program into memory and start executing it from the beginning.</span></p><p class="c2"><span class="c0">All variables previously used will stay in memory and be available to the program that is loaded.<br>Useful for breaking a project up. ex. <br>​LOAD &quot;\myscript.bas&quot;  or LOAD &quot;\uploads\myscript.bas&quot;</span></p><p class="c2"><span class="c0">load {other program name}</span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.1c77s012z9bb"><span class="c11 c5">HARDWARE INTERFACE COMMANDS</span></h1><p class="c2"><span class="c0">For i2c functions see here.</span></p><h2 class="c4" id="h.6fvxdnz0myqt"><span class="c7 c5">PO:</span></h2><p class="c2"><span class="c0">po allows you to set pin on the esp high or low</span></p><p class="c2"><span class="c0">po {pin no value or var} {value or var 1/0}</span></p><p class="c2"><span class="c0">alternative as function</span></p><p class="c2"><span class="c0">io(po,{pin},{value})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.d8x7r1n0ampg"><span class="c7 c5">PI:</span></h2><p class="c2"><span class="c0">Will place the high or low status of a pin in to the variable chose.</span></p><p class="c2"><span class="c0">Useful for reading push buttons and other electronic inputs.</span></p><p class="c2"><span class="c0">pi {pin no} {var to place result 1/0}</span></p><p class="c2"><span class="c0">alternative as function</span></p><p class="c2"><span class="c0">io(pi,{pin})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.ou7p7drtz7z5"><span class="c7 c5">PWO:</span></h2><p class="c2"><span class="c0">pwo allows you to set pin on the esp for PWM output</span></p><p class="c2"><span class="c0">pwo {pin no value or var} {value or var}</span></p><p class="c2"><span class="c0">alternative as function</span></p><p class="c2"><span class="c0">io(pwo,{pin},{value})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.v7ymoh2x1e79"><span class="c7 c5">PWI:</span></h2><p class="c2"><span class="c0">Will place pwm input status of a pin in to the variable chose.</span></p><p class="c2"><span class="c0">Useful for reading push buttons and other electronic inputs.</span></p><p class="c2"><span class="c0">pwi {pin no} {var to place result in}</span></p><p class="c2"><span class="c0">alternative as function</span></p><p class="c2"><span class="c0">io(pwi,{pin}</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.9cd5uoxdnuay"><span class="c7 c5"></span></h2><h2 class="c4" id="h.cv3ch0meta59"><span class="c7 c5">SERVO:</span></h2><p class="c2"><span class="c0">Will set the angle of a servo connected to the the pin.</span></p><p class="c2"><span class="c0">Angle must be between 0 and 180.</span></p><p class="c2"><span class="c0">servo {pin no} {value or var 0 to 180}</span></p><p class="c2"><span class="c0">alternative as function</span></p><p class="c2"><span class="c0">io(servo,{pin},{value})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.42c62vgpb0zt"><span class="c7 c5">AI:</span></h2><p class="c2"><span class="c0">Analog input is only available on the pin marked &quot;ADC&quot; on the ESP-12.</span></p><p class="c2"><span class="c0">Useful for retrieving input from photoresistors and other devices.</span></p><p class="c2"><span class="c0">ai {var to place result in}</span></p><p class="c2"><span class="c0">As a function </span></p><p class="c2"><span class="c0">Bla = io(ai)</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.l63gzmo3cjv0"><span class="c7 c5">LASTSTAT:</span></h2><p class="c2"><span class="c0">This will return the last polled status of a pin such as an interrupt and retain the value until it has changed again in another polling event. Also it will allow you to see the last value sent to a pin for servo, pwm or po.</span></p><p class="c2"><span class="c0">io(laststat,{pin no})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.ifa7768q34zs"><span class="c7 c5">TEMP:</span></h2><p class="c2"><span class="c0">Will retrieve temperature sensor reading from certain 1 wire devices connected to pin 2. See example here</span></p><p class="c2"><span class="c0">temp {Device ID} {Variable name to place data into}</span></p><p class="c2"><span class="c0">As a function</span></p><p class="c2"><span class="c0">Bla = temp( {Device ID} )</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.w1byijdhm4du"><span class="c7 c5">delay:</span></h2><p class="c2"><span class="c0">Will wait for a number of milliseconds before continuing execution.</span></p><p class="c2"><span class="c0">Useful for making leds blink</span></p><p class="c2"><span class="c0">delay {Var or value}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.63a112hevfah"><span class="c7 c5">gpio1reset:</span></h2><p class="c2"><span class="c0">Restore the normal behaviour of the serial port TX pin.</span></p><p class="c2"><span class="c0">gpio1reset()</span></p><p class="c2"><span class="c0">This is useful when the pin GPIO1 has been modified with commands like</span></p><p class="c2"><span class="c0">po 1 0</span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.s4aqkogmp3f9"><span class="c11 c5">OLED &amp; LCD DISPLAY COMMANDS</span></h1><p class="c2"><span class="c0">For i2c functions see here.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">I2C pins are 0 and 2. On NodeMCU boards they are labeled as D3 and D4.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.96una4govbb"><span class="c7 c5">OLEDPRINT:</span></h2><p class="c2"><span class="c0">Will print to the OLED display at specified position. X position for edge of display will differ for some models.</span></p><p class="c2"><span class="c0">oledprint {String or var} {x position value or var} {y position value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.lwpr5rqzej8q"><span class="c7 c5">OLEDCLS:</span></h2><p class="c2"><span class="c0">Will clear the screen.</span></p><p class="c2"><span class="c0">oledcls</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.o2sawh6twkmx"><span class="c7 c5">OLEDSEND:</span></h2><p class="c2"><span class="c0">Will send a value to the display. This is for sending native commands and requires a byte as a number. Refer to OLED display command documentation from manufactures spec.</span></p><p class="c2"><span class="c0">oledsend {Value or var}</span></p><p class="c2"><span class="c0">1602 LCD COMMANDS</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.kc66rfmhnx5z"><span class="c7 c5">LCDPRINT:</span></h2><p class="c2"><span class="c0">Will print to the OLED display at specified position. X position for edge of display will differ for some models.</span></p><p class="c2"><span class="c0">lcdprint {String or var} {x position value or var} {y position value or var}</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.13a2trwkj6oj"><span class="c7 c5"></span></h2><h2 class="c4" id="h.82iejumxa653"><span class="c7 c5">LCDCLS:</span></h2><p class="c2"><span class="c0">Will clear the screen.</span></p><p class="c2"><span class="c0">lcdcls</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.rxh3n863em8z"><span class="c7 c5">LCDBL:</span></h2><p class="c2"><span class="c0">Will turn the back light on or off. 1 for on, 0 for off.</span></p><p class="c2"><span class="c0">lcdbl {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.hwofhulnx7u2"><span class="c7 c5">LCDSEND:</span></h2><p class="c2"><span class="c0">Will send a value to the display. This is for sending native commands and requires a byte as a number. Refer to LCD display command documentation from manufactures spec.  MODE: 0=COMMAND, 1=DATA, 2=FOUR_BITS</span></p><p class="c2"><span class="c0">lcdsend {Value or var to send} {Value or Var for mode}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16 c21" id="h.779o9pwyzib8"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.d51ve88nfhnd"><span class="c11 c5"></span></h1><h1 class="c16" id="h.6zkk5om7lr8s"><span class="c11 c5">TFT ILI9341 display</span></h1><p class="c2"><span class="c0">A TFT IL9341 SPI display can be connected to the ESP.<br>This display has a resolution of 320x240 with 16bits color.<br><br>The display requires at 5 pins :<br>3 for the SPI, one for the CS and another one for the D/C</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.48wyzb7eaxny"><span class="c7 c5">tft.setup(CS_PIN, DC_PIN, rotation)    </span></h2><p class="c2"><span class="c0">Initialise the display specifying the pin used for the CS, the DC and the screen rotation. If not specified, the rotation will default to 0 (portrait). Rotation can be 0 to 3<br>example:<br>tft.init(16, 4, 3)      ‘set the pin 16 for the CS, the 4 for the DC and Landscape (3)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.tjqwgshte5vg"><span class="c7 c5">tft.rgb(red, green, blue)</span></h2><p class="c2"><span class="c0">return the 16bits conversion of the colors red, green and blue<br>red, green and blue are in the range 0 - 255<br>example:<br>let col = tft.rgb(255,0,0)     <br>tft.fill(color)     -&gt; fill the screen with the color; color can be obtained from tft.rgb() function<br><br>example:<br>tft.fill(tft.color(0,255,0))   -&gt; fill the screen with green</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.enl42rxsni0k"><span class="c7 c5">tft.line(x1,y1,x2,y2,col)</span></h2><p class="c2"><span class="c0">trace a line from the point (x1,y1) to the point(x2,y2) with color &#39;col&#39;<br>example:<br>tft.line(10,10,20,20,tft.rgb(255,0,0))</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4 c12" id="h.sor34q9l3l0z"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.g79gkcnk66zx"><span class="c7 c5"></span></h2><h2 class="c4" id="h.mn6eugzd05m1"><span class="c7 c5">tft.rect(x,y,w,h,col)</span></h2><p class="c2"><span class="c0">trace a rectangle from the point (x,y) with width &#39;w&#39; and height &#39;h&#39; with color &#39;col&#39;<br>example:<br>tft.rect(10,10,20,20,tft.rgb(0,0,255))</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.54fe5w9spnbk"><span class="c7 c5">tft.rect.fill(x,y,w,h,col)</span></h2><p class="c2"><span class="c0">trace a filled rectangle from the point (x,y) with width &#39;w&#39; and height &#39;h&#39; with color &#39;col&#39;<br>   example:<br>   tft.rect.fill(10,10,20,20,tft.rgb(0,0,255))</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.5njrem34epop"><span class="c7 c5">tft.rect.round(x,y,w,h,rad,col)</span></h2><p class="c2"><span class="c0">trace a rounded rectangle from the point (x,y) with width &#39;w&#39; and height &#39;h&#39;, radius &#39;rad&#39; and with color &#39;col&#39;<br>example:<br>tft.rect.round(10,10,100,100,5,tft.rgb(0,0,255))</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.5cyygg12ttun"><span class="c7 c5">tft.rect.round.fill(x,y,w,h,rad,col)</span></h2><p class="c2"><span class="c0">trace a rounded filled rectangle from the point (x,y) with width &#39;w&#39; and height &#39;h&#39;, radius &#39;rad&#39; and with color &#39;col&#39;<br>example:<br>tft.rect.round.fill(10,10,100,100,5,tft.rgb(0,0,255))</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.qxsda8ummrke"><span class="c7 c5">tft.circle(x,y,rad,col)</span></h2><p class="c2"><span class="c0">trace a circle with center in (x,y), radius &#39;rad&#39; and color &#39;col&#39;<br>example:<br>tft.circle(160,120,50,65535)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.kkjqrbsjazg"><span class="c7 c5">tft.circle.fill(x,y,rad,col)</span></h2><p class="c2"><span class="c0">trace a filled circle with center in (x,y), radius &#39;rad&#39; and color &#39;col&#39;<br>example:<br>tft.circle.fill(160,120,50,65535)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.k4aytq4hsugi"><span class="c7 c5">tft.text.color(col)</span></h2><p class="c2"><span class="c0">define the color used for the text printed</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.mbvdkat8kz3t"><span class="c7 c5">tft.text.cursor(x,y)</span></h2><p class="c2"><span class="c0">define the position of the cursor where the text will be printed</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.xufkspsf3sah"><span class="c7 c5">tft.text.size(size)</span></h2><p class="c2"><span class="c0">define the size of the text printed; can be from 1 to 8 (the font is always the same)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.p4xt3eo6reb3"><span class="c7 c5">tft.print(txt)</span></h2><p class="c2"><span class="c0">print the text on the screen using the color, position and size defined with the previous commands</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.2rrqkhqc2uk5"><span class="c7 c5">tft.println(txt)</span></h2><p class="c2"><span class="c5">same as tft.print() but after the command goes to the next line<br><br></span><span class="c0">example:<br>tft.text.color(tft.rgb(255,255,0))<br>tft.text.cursor(0,50)<br>tft.text.size(2)</span></p><p class="c2"><span class="c0">tft.print(&quot;This is &quot;)<br>tft.println(&quot;print &quot;)<br>tft.println(&quot;second line&quot;)<br>tft.println(&quot;third line&quot;)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.44okc320b3y3"><span class="c7 c5">tft.demo()</span></h2><p class="c2"><span class="c5">runs a demo taken directly from the arduino demos. Useful at the beginning to check the display.<br><br></span><hr style="page-break-before:always;display:none;"></p><h1 class="c16" id="h.trivwmndtwmo"><span class="c11 c5">FUNCTIONS (NEOPIXEL WS2812)</span></h1><p class="c2"><span class="c0">To use NEO Pixel strips you must connect the signal to pin 15, D8 for node mcu boards.</span></p><h2 class="c4" id="h.hfuup9bibo6i"><span class="c7 c5">NEO.SETUP():</span></h2><p class="c2"><span class="c0">Will configure the output pin to one other than the default.</span></p><p class="c2"><span class="c0">neosetup({pin NO})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.xqgfhob0prfe"><span class="c7 c5">NEO():</span></h2><p class="c2"><span class="c0">Will set the desired pixel led to the color specified with an RGB (Red, Green, Blue) value.</span></p><p class="c2"><span class="c0">neo({LED NO},{R},{G},{B})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.8lhhr218prih"><span class="c7 c5">NEO.CLS():</span></h2><p class="c2"><span class="c0">Will turn off all the leds on the strip.</span></p><p class="c2"><span class="c0">neocls()</span></p><h2 class="c4" id="h.oqyhug8ep4o1"><span class="c7 c5">NEO.STRIPCOLOR():</span></h2><p class="c2"><span class="c0">Will set a range of leds to the desired color.</span></p><p class="c2"><span class="c0">neostripcolor({start pixel},{end pixel},{R},{G},B})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.7zr8hzhg43jb"><span class="c11 c5">(FUNCTIONS) DHT</span></h1><p class="c2"><span class="c0">Functions to interface with the dht21 temp/humidity moduel.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.5upcwy7yps0i"><span class="c7 c5">DHT.SETUP():</span></h2><p class="c2"><span class="c0">Allows specification of the model (11, 21, 22) and the pin for the DHT sensor.</span></p><p class="c2"><span class="c0">dht.setup({model}, {pin})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.j4u6frxxt7yf"><span class="c7 c5">DHT.TEMP():</span></h2><p class="c2"><span class="c0">Will return the temperature reading in celsius from the sensor.</span></p><p class="c2"><span class="c0">dht.temp()</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.r2ozb7m9qmjr"><span class="c7 c5">DHT.HUM():</span></h2><p class="c2"><span class="c0">Will return the humidity</span></p><p class="c2"><span class="c0">dht.hum()</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.tuelrldmgmxp"><span class="c7 c5">DHT.HEATINDEX():</span></h2><p class="c2"><span class="c0">Compute heat index in Fahrenheit.</span></p><p class="c2"><span class="c0">dht.heatindex()</span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.ypf2b3ae7cku"><span class="c11 c5">WEB INTERFACE COMMANDS</span></h1><h2 class="c4" id="h.bmmwiqkzzzn0"><span class="c7 c5">CLS:</span></h2><p class="c2"><span class="c0">Will clear the screen and GUI buffer</span></p><p class="c2"><span class="c0">cls</span></p><h2 class="c4" id="h.gcnh6car4avy"><span class="c7 c5">WPRINT:</span></h2><p class="c2"><span class="c0">Will print text to the browser. Text will be sent to the browser upon the wait command. Note that there is no new line after it is printed so you must add html to create a new line or horizontal rule.</span></p><p class="c2"><span class="c0">wprint {value or var}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.etfpkbj8gie7"><span class="c7 c5">WPRINT with htmlvar() function:</span></h2><p class="c2"><span class="c0">To place a dynamic variable that will update on each refresh of the page with the current contents of that variable use the htmlvar function. </span></p><p class="c2"><span class="c0">Each time browser is refreshed the latest contents of the variable are place in the page.</span></p><p class="c2"><span class="c0">wprint htmlvar({var name}) </span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.c6pe2zkqmw5w"><span class="c7 c5">IMAGE:</span></h2><p class="c2"><span class="c0">Will insert an image into the web page. Image file should be uploaded to device using the file manager. If you specify the image file name starting with http:// you can point it to an image stored on a 3d part web server saving space on the ESP file system. </span></p><p class="c2"><span class="c0">image {image file name}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.lx0qlags7v5x"><span class="c7 c5">JAVASCRIPT:</span></h2><p class="c2"><span class="c0">Will allow you to include javascript files in your page. File must be uploaded to the device using the file manager.</span></p><p class="c2"><span class="c5">javascript {filename}</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.qh9rcx3quyuj"><span class="c7 c5"></span></h2><h2 class="c4" id="h.oniqyyp5xtlt"><span class="c7 c5">CSS:</span></h2><p class="c2"><span class="c0">Will allow you to include css files in your page. File must be uploaded to the device using the file manager.</span></p><p class="c2"><span class="c0">See the CSS example here.</span></p><p class="c2"><span class="c0">css {filename}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.j9yqohiz69an"><span class="c7 c5">BUTTON:</span></h2><p class="c2"><span class="c0">Functions like a goto command. Will be sent to the browser on the wait command.</span></p><p class="c2"><span class="c0">Will goto the branch label when clicked in the browser</span></p><p class="c2"><span class="c0">button {value or var} {Branch Label}</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 98.00px; height: 33.00px;"><img alt="" src="https://lh4.googleusercontent.com/mjPBJZljSOJYQjfX7JPc2Uj3WTRBpl0VFzvVww5OWhV7xk7_g504nJwFuJ-OdAjaKWASpY_xbCNl4MU_sBOAXr32BLZs9qR_6De1KlPA-UKNep2S_9yfcQJZTLoU4sgGlU3ofIrN" style="width: 98.00px; height: 33.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.lczmg0xlj3vv"><span class="c7 c5">IMAGEBUTTON:</span></h2><p class="c2"><span class="c0">Functions like a goto command. Will be sent to the browser on the wait command.</span></p><p class="c2"><span class="c0">Will goto the branch label when clicked in the browser. The image file must be uploaded to the device using the file manager.</span></p><p class="c2"><span class="c0">imagebutton {image file name} {Branch Label}</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 98.00px; height: 102.00px;"><img alt="" src="https://lh5.googleusercontent.com/dKNtv3v8MMCfHMggikso145XuJrTW9DK2aNJJhTCofFhbkDG-AhzDD8WiNqzhtOveRJspAQ7zii5V8Iq3QDSpuRaauLV32LiohulJYNH8YVPeRv5qgPQcCy28cz1niMkVHlzjxun" style="width: 98.00px; height: 102.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span><span class="c0">(example of a spectacular looking image button)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.9yfux1kqla9u"><span class="c7 c5">TEXTBOX:</span></h2><p class="c2"><span class="c0">The text inside the text entry filled will be whatever is in the variable.</span></p><p class="c2"><span class="c0">Will be displayed in the browser on the wait command</span></p><p class="c2"><span class="c0">textbox {var name}</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 180.00px; height: 33.00px;"><img alt="" src="https://lh3.googleusercontent.com/NJu4-HcwwZZnRqkEnr8xih0i0-Q0H2QUT5te5Ub1t7d2zhaeQBmqJZsif3ji4ABmllpM3BdmdIho4jFrrD9nIBsVCpZGcm3Hl4T8WX3K0NXazrXW_uQhlKKd0kYavPLf3QnE375-" style="width: 180.00px; height: 33.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><h2 class="c4 c12" id="h.cbkb98q6kqnf"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.ll8a6wk1ig4b"><span class="c7 c5"></span></h2><h2 class="c4" id="h.hv9ecql0q2rq"><span class="c7 c5">PASSWORDBOX:</span></h2><p class="c2"><span class="c0">The text inside the password entry filled will be whatever is in the variable.</span></p><p class="c2"><span class="c0">Will be displayed in the browser on the wait command</span></p><p class="c2"><span class="c0">passwordbox {var name}</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 188.00px; height: 31.00px;"><img alt="" src="https://lh5.googleusercontent.com/Y6GbkzVP8ALCqwh-zTlP1NF0G6VoIS-nEh2ZWm7Af2DKokxKbMmmn7m7W9SnMz6JYXpWY4OKo3EESNqxD5mEHq7GhCyl_VuaXtwWVkdbxJ8a1yEr2a-f-MQ520rXfenguYMv9UOt" style="width: 188.00px; height: 31.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><h2 class="c4" id="h.y9eksak5ntxl"><span class="c7 c5">SLIDER:</span></h2><p class="c2"><span class="c0">The slider will be created with a maximum and minimum value.</span></p><p class="c2"><span class="c0">slider {Var name} {min value} {max value}</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 149.00px; height: 33.00px;"><img alt="" src="https://lh4.googleusercontent.com/1uq_nTiYfEh9IGTJoOgh1Y7OhvsBLBPkgFowOShxxx1r4ZttKUeAKp0cVLU_VjrUIt39Ci18hjJ5bhOLNwG44K1WHw2EyQt2uv7n8BWIAF3sredYj1nNYv-kPwM0a2-I0voeS7YT" style="width: 149.00px; height: 33.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><h2 class="c4" id="h.42tlg267yum9"><span class="c7 c5">DROPDOWN:</span></h2><p class="c2"><span class="c0">The selected item will be placed into the variable.</span></p><p class="c2"><span class="c0">dropdown {Item list separated by commas} {var name}</span></p><p class="c2"><span class="c0">example:</span></p><p class="c2"><span class="c0">dropdown &quot;One,Two,Three&quot; bla</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 60.00px; height: 100.00px;"><img alt="" src="https://lh6.googleusercontent.com/p1LBkgk4DbhLzgmurCzNzF6RDyt09LelaKlV0R2Ct_EzieiksI8NEu0FkJUk5N70RxuhcFNNlimPZ1rLu6kzwI-aSsEhrbS1pXtjg263Z-p1FWrhD0b_R_qR1PZVn40oYXTPJHz7" style="width: 60.00px; height: 100.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><h2 class="c4" id="h.8vvjay37uon"><span class="c7 c5">LISTBOX:</span></h2><p class="c2"><span class="c0">The selected item will be placed into the variable.</span></p><p class="c2"><span class="c0">listbox {Item list separated by commas} {var name} {Height in items}</span></p><p class="c2"><span class="c0">example</span></p><p class="c2"><span class="c0">listbox &quot;One,Two,Three&quot; bla 5</span></p><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 59.00px; height: 94.00px;"><img alt="" src="https://lh6.googleusercontent.com/Tg-Ndj-mrRte2gEZCaKr2FrNrkB6mdzUxE7Sy6YROqYJMtsGkzbw0v2sm8lUoHxmXSC2Mwy8Czm8a8PITd_ZQJX4UWpHhX6Nn5ycBNPY2eWMec5X_Z2OOg_VFxaOMegims-zK1nv" style="width: 59.00px; height: 94.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><h2 class="c4 c12" id="h.55v32q5707t8"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.vbli56m6xs22"><span class="c7 c5"></span></h2><h2 class="c4" id="h.oclwm1pdhk4r"><span class="c7 c5">ONLOAD:</span></h2><p class="c2"><span class="c0">Optional branch to be executed any time a page is loaded from the device. This code will be executed before the page is returned but after any branches for buttons. Branch must terminate with wait command.</span></p><p class="c2"><span class="c0">onload {branch label} </span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.9u0d4918itve"><span class="c7 c5">WAIT:</span></h2><p class="c2"><span class="c0">Sends all the accumulated gui commands to the browser.</span></p><p class="c2"><span class="c0">The browser will display once this command is run. The esp will be placed in a wait state so that user interaction such as button press from the browser can be executed or pin interrupt functions. The program will halt unter there is user interaction.</span></p><p class="c2"><span class="c0">Wait</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.f5lixus9iftb"><span class="c7 c5">RETURNGUI:</span></h2><p class="c2"><span class="c0">Sends all the accumulated gui commands to the browser.</span></p><p class="c2"><span class="c0">The browser will display once this command is run. The program will continue executing the next lines after this command.</span></p><p class="c2"><span class="c5">r</span><span class="c0">eturngui</span></p><h2 class="c4" id="h.diqm6n3a0f2g"><span class="c7 c5">HTMLID():</span></h2><p class="c2"><span class="c0">The html id function will return the randomly generated id for the last gui object created. Useful for javascript interaction capabilities.</span></p><p class="c2"><span class="c0">htmlid()</span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.nw6ep3w7frt5"><span class="c11 c5">WEB MSG HANDLER COMMANDS</span></h1><p class="c2"><span class="c0">Msg handler events will only be handed when there is a request at the url http://device ip/msg? is used.</span></p><p class="c2"><span class="c0">See example /msg-url-usage.html for more information.</span></p><h2 class="c4" id="h.j9u727taji0f"><span class="c7 c5">MSGBRANCH:</span></h2><p class="c2"><span class="c0">Will set the branch for handling msg input urls. This branch will execute when the url &quot;ESP-IP-address/msg?&quot; is accessed. </span></p><p class="c2"><span class="c0">msgbranch {branch label}</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.m29uplf9c8z"><span class="c7 c5">MSGGET:</span></h2><p class="c2"><span class="c0">Will retrieve a url argument and place it in a variable.</span></p><p class="c2"><span class="c0">msgget {url arg} {variable name}</span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2"><span class="c0">Will retrieve the url argument &quot;color&quot; and place it into myColorVar </span></p><p class="c2"><span class="c0">Use browser to access &quot;ESP-IP-address/msg?color=blue&quot;</span></p><p class="c2"><span class="c0">msgget &quot;collor&quot; myColorVar</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.l5ypyzhzez9f"><span class="c7 c5">MSGRETURN:</span></h2><p class="c2"><span class="c0">Will set the text to be returned by the browser. No additional html is provide. Will overwrite previous return text if called more than once. Text will be returned when interpreter encounters the  wait command.</span></p><p class="c2"><span class="c0">msgreturn {variable name or string for return}</span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.syk5og313ap3"><span class="c11 c5">SMTP EMAIL COMMANDS</span></h1><p class="c2"><span class="c0">You will need an SMTP server such as http://www.smtp2go.com/</span></p><p class="c2"><span class="c0">SMTP Server: mail.smtp2go.com</span></p><p class="c2"><span class="c0">Port: 2525</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">For sending sms message to phones look up your criers sms gateway.</span></p><p class="c2"><span class="c0">http://martinfitzpatrick.name/list-of-email-to-sms-gateways/</span></p><h2 class="c4" id="h.rlbna0j5fs72"><span class="c7 c5">SETUPEMAIL:</span></h2><p class="c2"><span class="c0">Will configure the email server. Requires the server, port, user name and password. </span></p><p class="c2"><span class="c0">setupemail {String for server} {Value for port} {String for user name} {String for password}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.r4bh5nu1rqlm"><span class="c7 c5">EMAIL:</span></h2><p class="c2"><span class="c0">Will send an email using the from and to address using the subject and body.</span></p><p class="c2"><span class="c0">email {String To email} {String From Email} {String Subject} {String Body}</span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.fn26rcmo5y1f"><span class="c11 c5">WEB GRAPHICS COMMANDS</span></h1><p class="c2"><span class="c0">Colors are optional. If no color is specified it will default to black</span></p><p class="c2"><span class="c0">For examples you can look at /graphics-example.html and /graphic-clock-example.html</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.iiclsogsf6jf"><span class="c7 c5">GRAPHICS</span></h2><p class="c2"><span class="c0">Adds a graphics element to the page</span></p><p class="c2"><span class="c0">Each parameter can be a variable or a value.</span></p><p class="c2"><span class="c0">graphics {width} {height}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.y5q9szx6832y"><span class="c7 c5">GCLS:</span></h2><p class="c2"><span class="c0">Will clear the graphics buffer.</span></p><p class="c2"><span class="c0">gcls</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.nw3bukl6fjr7"><span class="c7 c5">LINE:</span></h2><p class="c2"><span class="c0">Creates a line in the graphic element</span></p><p class="c2"><span class="c0">Each parameter can be a variable or a value.</span></p><p class="c2"><span class="c0">line {x1} {y1} {x2} {y2} {color} </span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.3ckuz88tp7w4"><span class="c7 c5">CIRCLE:</span></h2><p class="c2"><span class="c0">Creates a circle in the graphic element</span></p><p class="c2"><span class="c0">Each parameter can be a variable or a value.</span></p><p class="c2"><span class="c0">circle {x1} {y1} {radius}  {color}</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.88f8ji9j0nj3"><span class="c7 c5"></span></h2><h2 class="c4" id="h.trp4ot6vql33"><span class="c7 c5">ELLIPSE:</span></h2><p class="c2"><span class="c0">Creates a ellipse in the graphic element</span></p><p class="c2"><span class="c0">Each parameter can be a variable or a value.</span></p><p class="c2"><span class="c0">ellipse {x1} {y1} {radiusX} {radiusY} {color} </span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.uiareb2d6517"><span class="c7 c5">RECT:</span></h2><p class="c2"><span class="c0">Creates a rectangle in the graphic element</span></p><p class="c2"><span class="c0">Each parameter can be a variable or a value.</span></p><p class="c2"><span class="c0">rect {x1} {y1} {radiusX} {radiusY} {color} </span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.jqedafa763qz"><span class="c7 c5">Color palette </span></h2><p class="c2"><span class="c0">0 = Black</span></p><p class="c2"><span class="c0">1 = Navy</span></p><p class="c2"><span class="c0">2 = Green</span></p><p class="c2"><span class="c0">3 = Teal</span></p><p class="c2"><span class="c0">4 = Maroon</span></p><p class="c2"><span class="c0">5 = Purple</span></p><p class="c2"><span class="c0">6 = Olive</span></p><p class="c2"><span class="c0">7 = Silver</span></p><p class="c2"><span class="c0">8 = Gray</span></p><p class="c2"><span class="c0">9 = Blue</span></p><p class="c2"><span class="c0">10 = Lime</span></p><p class="c2"><span class="c0">11 = Aqua</span></p><p class="c2"><span class="c0">12 = Red</span></p><p class="c2"><span class="c0">13 = Fuchsia</span></p><p class="c2"><span class="c0">14 = Yellow</span></p><p class="c2"><span class="c0">15 = White</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.ploelr1imkdf"><span class="c11 c5">WIFI COMMANDS</span></h1><h2 class="c4" id="h.3kaig1z8w7vd"><span class="c7 c5">CONNECT:</span></h2><p class="c2"><span class="c0">Will connect you to the wifi network using the ssid and password. Optionally you may specify the ip ADDRESS, Gateway and subnet mask for a static ip.</span></p><p class="c2"><span class="c0">connect {Var or String for SSID} {Var Or String for password}</span></p><p class="c2"><span class="c0">Static ip:</span></p><p class="c2"><span class="c0">connect {Var or String for SSID} {Var Or String for password} {ip var or sting} {gateway var or sting}  {netmask var or sting} </span></p><p class="c2"><span class="c0"> </span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.7j1ewz758hkz"><span class="c7 c5">AP:</span></h2><p class="c2"><span class="c0">Will create an access point with the name and password you specify.</span></p><p class="c2"><span class="c0">If the password is not specified it will be an open network.</span></p><p class="c2"><span class="c0">ap {Var or String for SSID} {Var Or String for password}</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.arwwvog42mdi"><span class="c7 c5">WIFIOFF:</span></h2><p class="c2"><span class="c0">Will turn off all networking for sta and ap mode. The WiFioff command can be called in order to disable all networking. The ap or connect command if run after WiFioff will activate that particular WiFi mode. You can turn them both back on at any point with each of these commands. </span></p><p class="c2"><span class="c0">wifioff</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.i3e012flb2ca"><span class="c7 c5">WIFI.SCAN():</span></h2><p class="c2"><span class="c0">Will return the number of available wifi networks. See an example here.</span></p><p class="c2"><span class="c5">wifi.scan()</span><hr style="page-break-before:always;display:none;"></p><h2 class="c4" id="h.pmesdancp2z6"><span class="c7 c5">WIFI.SSID():</span></h2><p class="c2"><span class="c0">Returns the network name for the selected network. See an example here.</span></p><p class="c2"><span class="c0">Must run a wifi.scan() first.</span></p><p class="c2"><span class="c0">wifi.ssid({Var for network number})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.wmpb34i2ayfb"><span class="c7 c5">WIFI.RSSI():</span></h2><p class="c2"><span class="c0">Returns the signal strength for the selected network. See an example here.</span></p><p class="c2"><span class="c0">Must run a wifi.scan() first.</span></p><p class="c2"><span class="c0">wifi.rssi({Var for network number})</span></p><h1 class="c16 c21" id="h.5kqx2vk2rmu0"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.fu6mkn8e1z2e"><span class="c11 c5"></span></h1><h1 class="c16" id="h.ku8x75ot4ppv"><span class="c11 c5">FUNCTIONS (THINGSPEAK API)</span></h1><p class="c2"><span class="c0">To get started with thing speak visit there web site at https://thingspeak.com/</span></p><p class="c2"><span class="c0">You need to have an account and channel/api key all set up.</span></p><p class="c2"><span class="c0">These functions will only work if the esp is connected to a network with the internet. </span></p><h2 class="c4" id="h.nlh2o2t87zyg"><span class="c7 c5">SENDTS:</span></h2><p class="c2"><span class="c0">Will post the fields contents to the thingspeak service. Must use the thingspeak key and field number.</span></p><p class="c2"><span class="c0">SENDTS({KEY},{FIELD NUMBER},{FIELD CONTENTS})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.z6kw7m9kih7m"><span class="c7 c5">READTS:</span></h2><p class="c2"><span class="c0">Will return the last value published for the desired field. Must use the thingspeak key, channel id and field number.</span></p><p class="c2"><span class="c0">readts({KEY},{CHANNEL ID},{FIELD NUMBER})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.p7hrivlovky"><span class="c11 c5">FUNCTIONS String</span></h1><p class="c2"><span class="c0">Functions can be called in place of variables and will typically return value.</span></p><p class="c2"><span class="c0">Function names are not case sensitive. ie. LeN() and len() are both valid</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.80ezj26efjk6"><span class="c7 c5">len():</span></h2><p class="c2"><span class="c0">Will return the length of the string</span></p><p class="c2"><span class="c0">len({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.hs5xyn82qywp"><span class="c7 c5">instr():</span></h2><p class="c2"><span class="c0">Will return location of a sub string within a string.</span></p><p class="c2"><span class="c5">A 3rd optional argument permit to </span><span class="c5">sets the starting position for each search. If omitted, search begins at the first character position.</span></p><p class="c2"><span class="c0">instr({string or var name},{string or var name to locate},{start})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.tot730njehj9"><span class="c5">instrrev():</span></h2><p class="c2"><span class="c0">Returns the position of the first occurrence of one string within another, starting from the right side of the string.</span></p><p class="c2"><span class="c5">A 3rd optional argument permit to set starting position for each search, starting from the left side of the string. If </span><span class="c5">Start</span><span class="c5"> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.</span></p><p class="c2"><span class="c5">instrrev({string or var name},{string or var name to locate},{start})</span></p><h2 class="c4" id="h.f283gimyxxyt"><span class="c7 c5">mid():</span></h2><p class="c2"><span class="c0">Will return the string from the start position to the end position inside of the input string.</span></p><p class="c2"><span class="c0">mid({string or var name},{Start position},{number of characters})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.rr4r1pn3fx0t"><span class="c7 c5">left():</span></h2><p class="c2"><span class="c5">Will return a string that contains a specified number of characters from the left side of a string.</span></p><p class="c2"><span class="c0">left({string or var name},{length})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.op62g0ychruz"><span class="c7 c5">right():</span></h2><p class="c2"><span class="c5">Will r</span><span class="c5">eturn a string containing a specified number of characters from the right side of a string.</span></p><p class="c2"><span class="c0">right({string or var name},{length})</span></p><h2 class="c4" id="h.2v20ztyx3ev3"><span class="c7 c5">str():</span></h2><p class="c2"><span class="c5">Will return the </span><span class="c5 c42">r</span><span class="c5">eturns a string representation of a number</span></p><p class="c2"><span class="c0">str({number or var name})</span></p><h2 class="c4" id="h.oenq9b9d608r"><span class="c7 c5">replace():</span></h2><p class="c2"><span class="c0">Will return a string after replacing the search text with the replacement text.</span></p><p class="c2"><span class="c0">replace({string or var name},{string to search for},{replacement for string})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.4bwh9t3fzr4z"><span class="c7 c5">chr():</span></h2><p class="c2"><span class="c0">Will return a character for the given number.</span></p><p class="c2"><span class="c0">chr({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.biy31bl5hutp"><span class="c7 c5">asc():</span></h2><p class="c2"><span class="c0">Will return a number for the first character in a string.</span></p><p class="c2"><span class="c0">asc({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.pyb19oepqhyd"><span class="c7 c5">upper():</span></h2><p class="c2"><span class="c0">Will return the supplied string in UPPERCASE.</span></p><p class="c2"><span class="c0">upper({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.q0v0c5f2lavb"><span class="c7 c5">lower():</span></h2><p class="c2"><span class="c0">Will return the supplied string in lowercase.</span></p><p class="c2"><span class="c0">lower({string or var name})</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.2f0masc7qbtr"><span class="c7 c5"></span></h2><h2 class="c4" id="h.jowshaa5k53f"><span class="c7 c5">id():</span></h2><p class="c2"><span class="c0">Will return the unique id of the chip.</span></p><p class="c2"><span class="c0">id()</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.2teptst116uw"><span class="c7 c5">version():</span></h2><p class="c2"><span class="c0">Will return the version string for the basic interpreter build.</span></p><p class="c2"><span class="c0">version()</span></p><h2 class="c4" id="h.ck8nmm2eba9w"><span class="c7 c5">word():</span></h2><p class="c2"><span class="c0">This function returns the nth word in the string, string variable or string expression.</span></p><p class="c2"><span class="c5">The string delimiter is optional. When it is not used, the space character is the delimiter.</span></p><p class="c2"><span class="c0">word( {original string}, {number}, {optional delimiter. Default is space} )</span></p><p class="c2"><span class="c0">Ex.</span></p><p class="c2"><span class="c0">word(“The quick brown fox jumped over the lazy dog”, 5) will return “jumped”</span></p><h2 class="c4" id="h.7cqfuo5br3zj"><span class="c7 c5">json():</span></h2><p class="c2"><span class="c0">Will parse a json string for the articular named data element within it. </span></p><p class="c2"><span class="c0">json({string or var name for data to be parsed},{string or var name for key name in data})</span></p><p class="c2"><span class="c0">The key can have the following syntax :</span></p><p class="c2"><span class="c0">“Key.subkey.innerkey…..” . Array can also be included such as “weather[5].description”</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Example with OpenWeatherAPI :</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">let apid = “xxxxx” ‘ place your APP_ID here</span></p><p class="c2"><span class="c0">let query = &quot;api.openweathermap.org/data/2.5/weather?&amp;units=metric&amp;q=Miami,us&amp;appid=&quot; &amp; appid</span></p><p class="c2"><span class="c0">let ret = wget(query)</span></p><p class="c2"><span class="c5">serialprintln ret</span></p><p class="c2"><span class="c0">let desc = json(ret,&quot;weather.description&quot;)</span></p><p class="c2"><span class="c0">let temp = json(ret,&quot;main.temp&quot;)</span></p><p class="c2"><span class="c0">let press = json(ret,&quot;main.pressure&quot;) </span></p><p class="c2"><span class="c0">let humid = json(ret,&quot;main.humidity&quot;)</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.fenr38ots23u"><span class="c7 c5"></span></h2><h2 class="c4" id="h.9wow1ne3qbqd"><span class="c7 c5">ReadOpenWeather():</span></h2><p class="c2"><span class="c0">Will parse a json string coming from an OpenWeatherAPI forecast request.</span></p><p class="c2"><span class="c0">At this kind of request generates a big amount of data, this function parse directly from the stream minimising the use of the RAM memory. </span></p><p class="c2"><span class="c0">It permit to extract, from the stream, the particular item required; the extracted data can then be parsed by the function json().</span></p><p class="c2"><span class="c0">The index_number can be 0, in that case the function will return the json root</span></p><p class="c2"><span class="c0">readopenweather({String or var name for url} , {index_number})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Example with OpenWeatherAPI forecast :</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">let apid = “xxxxx” ‘ place your APP_ID here</span></p><p class="c2"><span class="c0">‘This query represent a daily forecast for Miami, Florida; each item represent a day</span></p><p class="c2"><span class="c0">let query = &quot;api.openweathermap.org/data/2.5/forecast/daily?&amp;units=metric&amp;q=Miami,us&amp;appid=&quot; &amp; appid</span></p><p class="c2"><span class="c0">let ret = readopenweather(query,1) &#39; the 1 means the first item of the list - 0 means the root</span></p><p class="c2"><span class="c0">let temp_min = json(ret,&quot;temp.min&quot;)</span></p><p class="c2"><span class="c0">let temp_max = json(ret,&quot;temp.max&quot;)</span></p><p class="c2"><span class="c0">let tim = json(ret,&quot;dt&quot;) </span></p><p class="c2"><span class="c0">let tim = unixtime(tim)</span></p><p class="c2"><span class="c0">print &quot;Date :&quot; &amp; tim &amp; &quot; T min &quot; &amp; temp_min &amp; &quot; T max &quot; &amp; temp_max</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c5 c25"></span></p><h1 class="c16 c21" id="h.s1j55maby1rr"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.h58e4pt6bfsq"><span class="c11 c5"></span></h1><h1 class="c16" id="h.g4qwdbs2k9fn"><span class="c11 c5">FUNCTIONS (Numeric)</span></h1><p class="c2"><span class="c0">Functions can be called in place of variables and will typically return value.</span></p><p class="c2"><span class="c0">Function names are not case sensitive. ie. LeN() and len() are both valid</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Math Functions:</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.aasjnynd941"><span class="c7 c5">sqr():</span></h2><p class="c2"><span class="c0">Will return the square root.</span></p><p class="c2"><span class="c0">sqr({value or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.j9b7x1ajx5px"><span class="c7 c5">sin():</span></h2><p class="c2"><span class="c0">Will return the sine of an angle.</span></p><p class="c2"><span class="c0">sin({value or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.wi1a90tbky4h"><span class="c7 c5">cos():</span></h2><p class="c2"><span class="c0">Will return the cosine of an angle.</span></p><p class="c2"><span class="c0">cos({value or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.adwgf7jqkmjg"><span class="c7 c5">tan():</span></h2><p class="c2"><span class="c0">Will return the tangent of an angle.</span></p><p class="c2"><span class="c0">tan({value or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.u05gpwh32rfh"><span class="c7 c5">log():</span></h2><p class="c2"><span class="c0">Will return the log of the provided value.</span></p><p class="c2"><span class="c0">log({value or var name})</span></p><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.tzd87ljrki89"><span class="c7 c5"></span></h2><h2 class="c4" id="h.x0wqc97cok8a"><span class="c7 c5">rnd():</span></h2><p class="c2"><span class="c0">Will return a random number up to the value set.</span></p><p class="c2"><span class="c0">rnd({value or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.uwtwge4s0jfd"><span class="c7 c5">millis():</span></h2><p class="c2"><span class="c0">Will return number of milliseconds since boot time.</span></p><p class="c2"><span class="c0">millis()</span></p><h2 class="c4" id="h.7grao8vymzrb"><span class="c7 c5">int():</span></h2><p class="c2"><span class="c0">Will return an integer value.  </span></p><p class="c2"><span class="c0">int({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.h9qivkho9ac"><span class="c7 c5">val():</span></h2><p class="c2"><span class="c0">Will return a value from a string.  </span></p><p class="c2"><span class="c0">val({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.rdn0inf7grg6"><span class="c7 c5">oct():</span></h2><p class="c2"><span class="c0">Will return the oct value of an integer.  </span></p><p class="c2"><span class="c0">oct({string or var name})</span></p><h2 class="c4" id="h.uo4td83gbar"><span class="c7 c5">hex():</span></h2><p class="c2"><span class="c0">Will return the hex value of an integer. </span></p><p class="c2"><span class="c0">An optional 2nd argument define the number of digits </span></p><p class="c2"><span class="c0">hex({string or var name},{nb_of_digits})</span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2"><span class="c0">print hex(12)                -&gt; c</span></p><p class="c2"><span class="c0">print hex(12, 2)        -&gt; 0c</span></p><p class="c2"><span class="c0">print hex(2170)          -&gt; 87a</span></p><p class="c2"><span class="c0">print hex(2170, 4)        -&gt; 087a</span></p><p class="c2"><span class="c0">print hex(2170, 6)        -&gt; 00087a</span></p><h2 class="c4 c12" id="h.ltgivbtlyfzo"><span class="c7 c5"></span></h2><hr style="page-break-before:always;display:none;"><h2 class="c4 c12" id="h.usco0u0ejo0"><span class="c7 c5"></span></h2><h2 class="c4" id="h.9q8zlm9wfsrh"><span class="c7 c5">hextoint():</span></h2><p class="c2"><span class="c0">Will return an integer value from an hex value</span></p><p class="c2"><span class="c0">hextoint({string or var name})</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.yh2o7hxxi60p"><span class="c7 c5">ramfree():</span></h2><p class="c2"><span class="c0">Will return the amount of ram free in bytes.  </span></p><p class="c2"><span class="c0">ramfree()</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.geo2leujgtul"><span class="c7 c5">flashfree():</span></h2><p class="c2"><span class="c0">Will return the amount of flash free in bytes. This is only applicable to flash designated for the file system.</span></p><p class="c2"><span class="c0">flashfree()</span></p><h2 class="c4" id="h.r7f0h8hizj42"><span class="c7 c5">Function inherited from the parser (c++ style)</span></h2><h2 class="c4" id="h.10na78uyyxbb"><span class="c7 c5">pow(x, y ):</span></h2><p class="c2"><span class="c5">Returns x raised to the power of </span><span class="c5">y</span><span class="c0">.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.uk1tasxiz3v9"><span class="c7 c5">exp(x):</span></h2><p class="c2"><span class="c5">Returns the value of </span><span class="c5">e</span><span class="c0"> raised to the xth power.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.b911ttqfaaif"><span class="c7 c5">asin(x):</span></h2><p class="c2"><span class="c0">Returns the arc sine of x in radians.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.81wi107krtyg"><span class="c7 c5">acos(x):</span></h2><p class="c2"><span class="c0">Returns the arc cosine of x in radians.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.o5u1sw8mat25"><span class="c7 c5">atan(x):</span></h2><p class="c2"><span class="c0">Returns the arc tangent of x in radians.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.apj8pu39hor"><span class="c7 c5">atan2(x, y):</span></h2><p class="c2"><span class="c0">Returns the arc tangent in radians of y/x based on the signs of both values to determine the correct quadrant.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.kr61utj84kjf"><span class="c7 c5">abs(x):</span></h2><p class="c2"><span class="c5">Returns the absolute value of </span><span class="c5">x converted to integer</span><span class="c0">.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.cb4wlu6v19j9"><span class="c5 c33">f</span><span class="c7 c5">abs(x)</span></h2><p class="c2"><span class="c5">Returns the absolute value of </span><span class="c5">x</span><span class="c0">.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.tj5wkxeudqzo"><span class="c7 c5">floor(x):</span></h2><p class="c2"><span class="c5">R</span><span class="c5">eturns the largest integer value less than or equal to </span><span class="c5">x</span><span class="c0">.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.82gmza3hfbcr"><span class="c7 c5">ceil(x):</span></h2><p class="c2"><span class="c5">Returns the smallest integer value greater than or equal to </span><span class="c5">x</span><span class="c0">.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.yi4qbg27o873"><span class="c7 c5">round(x):</span></h2><p class="c2"><span class="c5">Return the integral value nearest to x rounding halfway cases away from zero, regardless of the current rounding direction.</span></p><h1 class="c16 c21" id="h.elfv7ncu62to"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.53t96o9ihykz"><span class="c11 c5"></span></h1><h1 class="c16" id="h.4rb22aomj7jx"><span class="c11 c5">FUNCTIONS (Time&amp;Date)</span></h1><p class="c2"><span class="c0">Time and date functions:</span></p><h2 class="c4" id="h.9x9te322o554"><span class="c7 c5">time():</span></h2><p class="c2"><span class="c0">Will return the date and time as a string.  You can optionally specify the format you want it back in.</span></p><p class="c2"><span class="c0">Options: month, day, hour, min, sec, year, dow (Day of the week, ex. fri)</span></p><p class="c2"><span class="c0">time({Optional specification of format})</span></p><p class="c2"><span class="c0">with an option.</span></p><p class="c2"><span class="c0">time(&quot;year&quot;)</span></p><p class="c2"><span class="c0">time(“year-month-day”) will return “2016-Apr-10”</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.2ov2qnievfvz"><span class="c7 c5">unixtime():</span></h2><p class="c2"><span class="c0">Permit to convert from a date/time in unix format (a number) to text.</span></p><p class="c2"><span class="c0">Will return the date and time as a string.  You can optionally specify the format you want it back in.</span></p><p class="c2"><span class="c0">Options: month, date, hour, min, sec, year, dow (Day of the week, ex. fri)</span></p><p class="c2"><span class="c0">unixtime({datenumber} , {Optional specification of format})</span></p><p class="c2"><span class="c0">with an option.</span></p><p class="c2"><span class="c5">unixtime(1459681200, &quot;year&quot;</span></p><h2 class="c4" id="h.f4z2o5d3z1tp"><span class="c5">timesetup():</span></h2><p class="c2"><span class="c0">Will set up the time time zone and daylight savings attribute.</span></p><p class="c2"><span class="c0">timesetup({number or var for time zone},{number or var for dst})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.pi4g8o5xev7c"><span class="c11 c5">FUNCTIONS (Web Related)</span></h1><p class="c2"><span class="c0">Internet functions:</span></p><h2 class="c4" id="h.2asn2thorjr"><span class="c7 c5">wget():</span></h2><p class="c2"><span class="c0">Will fetch the html contents of a web page and return it as a string.</span></p><p class="c2"><span class="c0">Do not put &quot;http://&quot; in front of the url. Defaults to port 80 if none is specified. <br>wget({String or var name for url},{Optional port number})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.4hxahe1etg8g"><span class="c7 c5">ip():</span></h2><p class="c2"><span class="c0">Will return the units ip address as a string.</span></p><p class="c2"><span class="c0">ip()</span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.xn70uv9yilc8"><span class="c11 c5">FUNCTIONS I2C</span></h1><p class="c2"><span class="c0">Functions can be called in place of variables and will typically return value.</span></p><p class="c2"><span class="c0">Function names are not case sensitive. ie. LeN() and len() are both valid</span></p><p class="c2"><span class="c0">NOTE: No spaces should be used inside a function. Only commas if there are multiple values to be parsed.</span></p><p class="c2"><span class="c0">let bla = len(&quot;hello world&quot;) is ok</span></p><p class="c2"><span class="c0">let ble = len(   &quot;hello world&quot;   ) is not ok.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.o9kamrmfwc3u"><span class="c7 c5">i2c functions:</span></h2><p class="c2"><span class="c0">For more information on usage look at this example.</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.wvlhow429y9t"><span class="c7 c5">i2c.begin():</span></h2><p class="c2"><span class="c0">Will begin transmission to the I2C device with desired address. </span></p><p class="c2"><span class="c0">i2c.begin({value or var for device address})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.l3zfyxxyxb4p"><span class="c7 c5">i2c.write():</span></h2><p class="c2"><span class="c0">Will write a single value (1 character) to the i2c device.</span></p><p class="c2"><span class="c0">i2c.write({value or var for data})</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.c7ja5gcycrt5"><span class="c7 c5">i2c.end():</span></h2><p class="c2"><span class="c0">Will terminate the i2c contamination with a particular device.</span></p><p class="c2"><span class="c0">i2c.end()</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.ijfbajbw75ii"><span class="c7 c5">i2c.requestfrom():</span></h2><p class="c2"><span class="c0">Will request a quantity of bytes from  device.</span></p><p class="c2"><span class="c0">i2c.requestfrom({value or var for device id},{value or var for number of bytes to request})</span></p><h2 class="c4" id="h.mccdbu9w5a5n"><span class="c7 c5">i2c.available():</span></h2><p class="c2"><span class="c0">Returns the number of bytes available for retrieval with i2c.read(). </span></p><p class="c2"><span class="c0">i2c.available()</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.mv7qyjm86k1c"><span class="c7 c5">i2c.read():</span></h2><p class="c2"><span class="c0">Will return a single character as an integer. Character returned will be next out of buffer. </span></p><p class="c2"><span class="c0">i2c.read()</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16 c21" id="h.xwkz80dpsc1u"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.ahoarhwiyum2"><span class="c11 c5"></span></h1><h1 class="c16" id="h.sq07505bcs4f"><span class="c11 c5">FUNCTIONS SPI</span></h1><p class="c2"><span class="c0">The SPI port (H/W) is available for general use.</span></p><p class="c2"><span class="c0">The following pins are defined :</span></p><p class="c2"><span class="c0">SCK : GPIO14</span></p><p class="c2"><span class="c0">MISO: GPIO12 (Master Input, Slave Output) (input  for the ESP8266)</span></p><p class="c2"><span class="c5">MOSI: GPIO13 (Master Output,Slave Input ) (output for the ESP8266)</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">The CS pin can be any pin. (controlled by user program)</span></p><h2 class="c4" id="h.jm7p3va7mehv"><span class="c7 c5">spi.setup():</span></h2><p class="c2"><span class="c0">Opens the SPI port and set the speed.</span></p><p class="c2"><span class="c0">It possible to optionally define the SPI_MODE and the data direction.</span></p><p class="c2"><span class="c0">By default these values are SPI_MODE0 and MSB_FIRST.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">spi.setup({speed}, {MODE}, {MSB_FIRST})</span></p><p class="c2"><span class="c0">Example :</span></p><p class="c2"><span class="c0">spi.setup(1000000)    -&gt; 1Mbit/sec, mode 0, MSB_FIRST</span></p><p class="c2"><span class="c0">spi.setup(500000, 1, 1)   -&gt;500Kb/sec, mode 1, MSB_FIRST</span></p><p class="c2"><span class="c0">spi.setup(100000, 1, 0)   -&gt;100Kb/sec, mode 1, LSB_FIRST</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.1z734pgcoyir"><span class="c7 c5">spi.byte():</span></h2><p class="c2"><span class="c5">W</span><span class="c5 c26">rite and receive byte at the same time (the arguments are numbers)</span></p><p class="c2"><span class="c0">rec = spi.byte({send variable})  </span></p><p class="c2"><span class="c0">The value received and sent are numbers (byte)</span></p><p class="c2"><span class="c0">Can be used as a command if the received argument is not required</span></p><p class="c2"><span class="c0">Example :</span></p><p class="c2"><span class="c0">rec = spi.byte(55)</span></p><p class="c2"><span class="c0">spi.byte(123)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.kov3p4k3pg7g"><span class="c7 c5">spi.string():</span></h2><p class="c2"><span class="c0">Write and receive a string of len chars.</span></p><p class="c2"><span class="c0">var$ = spi.string({string}, {len})</span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2"><span class="c0">dat$ = spi.string(&quot;Hello World!&quot;, 12)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.u1pksdq2k6wh"><span class="c7 c5">spi.hex():</span></h2><p class="c2"><span class="c0">write and receive a string containing an hexadecimal message representing len bytes.</span></p><p class="c2"><span class="c0">var $ = spi.string({hex_string}, {len})</span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2"><span class="c0">dat$ = spi.hex(&quot;a1b2c3d4e5f6&quot;, 6) -&gt; send 6 bytes (sequence of a1, b2, c3, d1, e5, f6) and receive in dat$</span></p><p class="c2 c6"><span class="c0"></span></p><hr style="page-break-before:always;display:none;"><p class="c2 c6"><span class="c0"></span></p><h1 class="c16" id="h.b2n1e75wo9be"><span class="c11 c5">FUNCTIONS IR:</span></h1><h1 class="c16" id="h.xjqs4lmeefo8"><span class="c11 c5">IR RECEIVE:</span></h1><p class="c2"><span class="c0">Several coding are supported; refer to the library for more details<br>The receiver can be a VS1838B or similar; this is very cheap (less than 2$ for 10!)<br>An hacked IR receiver can be found into a TV, old video recorder, ect....</span></p><h2 class="c4" id="h.gn0q918s679z"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 493.50px; height: 190.83px;"><img alt="" src="https://docs.google.com/drawings/d/sn22w1FiR9J9merWYP06new/image?parent=1NMZvnnjZ5XNzkykINgYS_Ql6mQ3nJEAzYudbmScdiIg&amp;rev=119&amp;drawingRevisionAccessToken=YhpKzUgH3yrpqA&amp;h=190&amp;w=493&amp;ac=1" style="width: 493.50px; height: 190.83px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span><span class="c7 c5"><br>IRBRANCH:</span></h2><p class="c2"><span class="c0">Will specify a branch to execute when an infrared code is recognised. Branch must end with the return command.</span></p><p class="c2"><span class="c0">irbranch [label]</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.gb3r4iunhdqp"><span class="c7 c5">ir.recv.setup(pin)</span></h2><p class="c2"><span class="c0">set the pin used for the IR reception (IR receiver connected to the pin)<br>example:<br>ir.recv.init(5)      ‘set the pin 5</span></p><h2 class="c4" id="h.2rwzwhzd15q6"><span class="c7 c5"><br>ir.recv.get()</span></h2><p class="c2"><span class="c0">get the code received ; the code is a string in hex format </span></p><p class="c2"><span class="c0">Example: </span></p><p class="c2"><span class="c0">let r = ir.recv.get()      -&gt;4907d8c5</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.i2usru3sut2a"><span class="c7 c5">ir.recv.full()</span></h2><p class="c2"><span class="c0">get the code received + the format + nb_of bits<br>this is useful to identify the kind of remote controller<br>and the size of the message<br>example:<br>let r = ir.recv.full()     -&gt; 4907d8c5:NEC:32</span></p><h2 class="c4" id="h.hoqmvjlfao7v"><span class="c7 c5">ir.recv.dump()   </span></h2><p class="c2"><span class="c0">get the code received but verbose the message received on the serial port1 Probably more useful during debug<br>example:<br>let r = ir.recv.dump()</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2 c6"><span class="c0"></span></p><h1 class="c16 c21" id="h.o0eetkm2ah1h"><span class="c11 c5"></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.84bz8mj2ktit"><span class="c11 c5"></span></h1><h1 class="c16" id="h.h8aszq113962"><span class="c11 c5">IR TRANSMIT:</span></h1><h2 class="c4" id="h.mm09km8f25n"><span class="c7 c5">For the moment only the Sony and the NEC coding are supported for the transmission.</span></h2><p class="c2"><span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 301.00px; height: 102.35px;"><img alt="" src="https://docs.google.com/drawings/d/smcvw_mZcDYewBgIsxo919Q/image?parent=1NMZvnnjZ5XNzkykINgYS_Ql6mQ3nJEAzYudbmScdiIg&amp;rev=13&amp;drawingRevisionAccessToken=IOMDjaGUzeDOJw&amp;h=102&amp;w=301&amp;ac=1" style="width: 301.00px; height: 102.35px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""></span></p><h2 class="c4" id="h.xlx1y0tbd7ws"><span class="c7 c5">ir.send.setup(pin) </span></h2><p class="c2"><span class="c0">set the pin used for the IR transmission (led connected to GND via a resistor)<br>example : <br>ir.send.init(4)     ‘set the pin 4</span></p><h2 class="c4" id="h.shslisiwjlkk"><span class="c7 c5">ir.send.nec(code, nb_bits)</span></h2><p class="c2"><span class="c0">send the code (string) composed of nb_bits bits<br>example:<br>ir.send.nec(&quot;4907d8c5&quot;, 32)</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.q2xp3mos81ty"><span class="c7 c5">ir.send.sony(code, nb_bits)   </span></h2><p class="c2"><span class="c0">send the code (string) composed of nb_bits bits<br>example:<br>ir.send.sony(&quot;910&quot;, 12)<br></span></p><hr style="page-break-before:always;display:none;"><h1 class="c16 c21" id="h.sua91ogss6d"><span class="c0"></span></h1><h1 class="c16" id="h.s2f9gnk1rfei"><span class="c11 c5">FUNCTIONS UDP:</span></h1><h2 class="c4" id="h.qji831aa7xtn"><span class="c7 c5">Udpbegin:</span></h2><p class="c2"><span class="c5">Starts an UDP server listening on the port specified.</span></p><p class="c2"><span class="c0">udpbegin {localport}</span></p><p class="c2"><span class="c0">localport is a number (ex: 1234)</span></p><p class="c2"><span class="c0">Example: udpbegin 4300</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.pnqoj6bcswtu"><span class="c7 c5">Udpstop:</span></h2><p class="c2"><span class="c5">Stop the UDP server</span></p><p class="c2"><span class="c0">udpstop</span></p><p class="c2"><span class="c0">Works for UdpBegin and UdpBeginMulticast</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.gci6r1m9in0b"><span class="c7 c5">UdpbeginMultiCast:</span></h2><p class="c2"><span class="c5">Starts an UDP server multicast  listening at the address and the port specified.</span></p><p class="c2"><span class="c0">udpbeginmulticast {multicast_ip}, {localport}</span></p><p class="c2"><span class="c5">The multicast IP shall be in the range </span><span class="c5 c36"> </span><span class="c0">224.0.0.0 to 239.255.255.255</span></p><p class="c2"><span class="c0">Example : udpbeginmulticast “224.0.0.67”, 4567</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.pnseely0i2e"><span class="c7 c5">Udpwrite:</span></h2><p class="c2"><span class="c5">Write a string toward a remote IP and  port</span></p><p class="c2"><span class="c0">udpwrite {ip_address}, {port}, {message}</span></p><p class="c2"><span class="c0">ip_address is a string (ex: “192.168.1.123”)</span></p><p class="c2"><span class="c0">message is a string (ex: “This is a valid message”)</span></p><p class="c2"><span class="c5">port is a number (ex: 5000)</span></p><p class="c2"><span class="c5">Example: udpwrite “192.168.1.12”, 3000, “Message OK”</span><hr style="page-break-before:always;display:none;"></p><h2 class="c4" id="h.f5xtg4ss2k32"><span class="c7 c5">UdpwriteMultiCast:</span></h2><p class="c2"><span class="c5">Write a string toward a multicast IP and port</span></p><p class="c2"><span class="c0">udpwritemulticast {ip_address}, {port}, {message}</span></p><p class="c2"><span class="c0">ip_address is a string (ex: “224.0.0.50”)</span></p><p class="c2"><span class="c0">message is a string (ex: “This is a valid message”)</span></p><p class="c2"><span class="c0">port is a number (ex: 6000)</span></p><p class="c2"><span class="c0">Example: udpwritemulticast “224.0.0.55”, 3100, “Message NOT delivered!”</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.qa3x34y4sn3t"><span class="c7 c5">UdpReply:</span></h2><p class="c2"><span class="c0">Send an UDP message back to the original transmitter.</span></p><p class="c2"><span class="c0">Permit to answer directly without specify the IP and port</span></p><p class="c2"><span class="c0">udpreply {message}</span></p><p class="c2"><span class="c0">message is a string (ex: “This is a valid message”)</span></p><p class="c2"><span class="c0">Example: udpreply “Message received”</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.8c1kmubw7gyr"><span class="c7 c5">UdpRead():</span></h2><p class="c2"><span class="c5">Read</span><span class="c0"> an UDP message received.</span></p><p class="c2"><span class="c0">To works, the UDP server needs to be open (commands UdpBegin or UdpBeginMultiCast)</span></p><p class="c2"><span class="c0">udpread()</span></p><p class="c2"><span class="c0">Example: let rec = udpread()</span></p><p class="c2 c6"><span class="c0"></span></p><h2 class="c4" id="h.2fhyh6srhpw1"><span class="c7 c5">UdpRemote():</span></h2><p class="c2"><span class="c0">Read the IP address and the port of the message received</span></p><p class="c2"><span class="c0">To works, the UDP server needs to be open (commands UdpBegin or UdpBeginMultiCast)</span></p><p class="c2"><span class="c0">udpremote()</span></p><p class="c2"><span class="c0">Example: let rem = udpremote()</span></p><p class="c2"><span class="c5">The result will be in the form of IP:port; example (192.200.150.7:4568)</span><hr style="page-break-before:always;display:none;"></p><h2 class="c4" id="h.my6f48khi1c0"><span class="c7 c5">UdpBranch:</span></h2><p class="c2"><span class="c0">Define a branch label defining the place where the program will continue as soon as an UDP message is received. As soon as the return command is found, the program will continue from the interrupted point.</span></p><p class="c2"><span class="c0">To works, the UDP server needs to be open (commands UdpBegin or UdpBeginMultiCast)</span></p><p class="c2"><span class="c0">udpBranch {label}</span></p><p class="c2"><span class="c0">Example:</span></p><p class="c2"><span class="c0">udpbegin 4567</span></p><p class="c2"><span class="c0">udpbranch [udp.received]</span></p><p class="c2"><span class="c0">wait</span></p><p class="c2"><span class="c0">[udp.received]</span></p><p class="c2"><span class="c0">let rec = udpread()</span></p><p class="c2"><span class="c0">let rem = udpremote()</span></p><p class="c2"><span class="c0">Serialprint “Message received “ &amp; rec &amp; “ from “ &amp; rem</span></p><p class="c2"><span class="c0">udpreply “OK”</span></p><p class="c2"><span class="c5">return</span><hr style="page-break-before:always;display:none;"></p><h1 class="c16" id="h.99muj8p4d9zz"><span class="c11 c5">SPECIFICITY OF THE NEW PARSER</span></h1><p class="c2"><span class="c0">String Literals : it’s possible to use the “ or the | as string literals;</span></p><p class="c2"><span class="c0">This permits to include the “ or | inside a string; example</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">A = |this is a “string”|</span></p><p class="c2"><span class="c0">B = “this is a |string|”</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Comparison operators for string and numbers:</span></p><p class="c2"><span class="c0">The ‘=’ or ‘==’ gives the same result for string and numbers</span></p><p class="c2"><span class="c0">The string can now be compared also for &gt;, &lt;, etc.</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Boolan binary operators</span></p><p class="c2"><span class="c0">The classic “basic” binary operators are available :</span></p><p class="c2"><span class="c0">and, or, xor, not</span></p><p class="c2"><span class="c0">Example: print 255 and 15;  let a = 255 xor 15; let b = not 15; let c = a or b</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Shift operators</span></p><p class="c2"><span class="c0">The shift left ‘&lt;&lt;’ and shift right ‘&gt;&gt;’ operators are available.</span></p><p class="c2"><span class="c0">Example: print 15 &lt;&lt; 3;      let c = a &gt;&gt; 4</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Modulo Operator (%)</span></p><p class="c2"><span class="c0">The modulo operator ‘%’ is available</span></p><p class="c2"><span class="c0">Example: print 10 % 3</span></p><p class="c2"><span class="c0"> </span></p><p class="c2"><span class="c0">Boolean operators in ‘if’</span></p><p class="c2"><span class="c0">All the boolean operators can be used in the ‘if’ command :</span></p><p class="c2"><span class="c0">If a = b and c&lt;&gt;d then …..</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">All the comparisons can be used into expressions. If the result is true, the value will be -1, 0 is false</span></p><p class="c2"><span class="c0">Example </span></p><p class="c2"><span class="c0">let a = 5 &lt;&gt; 3  ⇒ -1    </span></p><p class="c2"><span class="c0">print 5*3 = 8   ⇒ -1   </span></p><p class="c2"><span class="c0">print 5-4 = 2   ⇒ 0</span></p><p class="c2 c6"><span class="c0"></span></p><p class="c2"><span class="c0">Spaces are don’t care :</span></p><p class="c2"><span class="c0">A = 5 + 3 is the same as a=5+3</span></p><p class="c2 c6"><span class="c0"></span></p><div><p class="c2 c6"><span class="c40 c26"></span></p></div></div></div><script type="text/javascript" nonce="2rUEBTbonHkSNhlesg6kUw">(function(){/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var aa="function"==typeof Object.create?Object.create:function(a){function b(){}b.prototype=a;return new b},ba="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};
function ca(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");}var da=ca(this);function ea(a,b){if(b)a:{var c=da;a=a.split(".");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}var k;
if("function"==typeof Object.setPrototypeOf)k=Object.setPrototypeOf;else{var l;a:{var fa={a:!0},ha={};try{ha.__proto__=fa;l=ha.a;break a}catch(a){}l=!1}k=l?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null}var ia=k;
function m(a,b){a.prototype=aa(b.prototype);a.prototype.constructor=a;if(ia)ia(a,b);else for(var c in b)if("prototype"!=c)if(Object.defineProperties){var d=Object.getOwnPropertyDescriptor(b,c);d&&Object.defineProperty(a,c,d)}else a[c]=b[c];a.m=b.prototype}ea("Object.is",function(a){return a?a:function(b,c){return b===c?0!==b||1/b===1/c:b!==b&&c!==c}});var n=this||self;function p(){}function q(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}
function ja(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function ka(a,b){function c(){}c.prototype=b.prototype;a.m=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.D=function(d,e,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[e].apply(d,g)}}function r(a){return a};function t(a){t[" "](a);return a}t[" "]=p;function la(a,b,c){return Object.prototype.hasOwnProperty.call(a,b)?a[b]:a[b]=c(b)};function ma(a){return la(a.prototype,"$$generatedClassName",function(){return"Class$obf_"+{valueOf:function(){return++na}}})}var na=1E3;function v(){}v.prototype.s=function(){return this.j||(Object.defineProperties(this,{j:{value:oa=oa+1|0,enumerable:!1}}),this.j)};v.prototype.toString=function(){var a=w(x(pa(this.constructor)))+"@";var b=(this.s()>>>0).toString(16);return a+w(b)};function y(){}m(y,v);y.prototype.h=function(a){this.g=a;if(a instanceof Object)try{a.v=this}catch(b){}};function qa(a){a.g instanceof Error&&(Error.captureStackTrace?Error.captureStackTrace(a.g):a.g.stack=Error().stack)}y.prototype.toString=function(){var a=x(pa(this.constructor)),b=this.l;return null==b?a:w(a)+": "+w(b)};
function ra(a){if(null!=a){var b=a.v;if(null!=b)return b}a instanceof TypeError?(b=new sa,b.l=w(a),qa(b),b.i=a,b.h(new TypeError(b)),a=b):(b=new z,b.l=w(a),qa(b),b.i=a,b.h(Error(b)),a=b);return a};function A(){}m(A,y);function B(){}m(B,A);function z(){}m(z,B);z.prototype.h=function(a){B.prototype.h.call(this,"__noinit__"===this.i?a:this.i)};function sa(){}m(sa,z);var oa=0;function ta(a,b){return"string"==typeof a?a.charCodeAt(b):a.g(b)};function C(){}var ua,va;m(C,v);function wa(){wa=function(){};va=new D;ua=new E};function D(){}m(D,C);D.prototype.toString=function(){return""};function E(){}m(E,C);E.prototype.toString=function(){return"unknown"};function w(a){return null==a?"null":a.toString()}function xa(a){return 65536<=a?w(String.fromCharCode((55296+((a-65536|0)>>10&1023)|0)&65535))+w(String.fromCharCode((56320+((a-65536|0)&1023)|0)&65535)):String.fromCharCode(a&65535)}function ya(a,b){var c=b,d=a.length,e;b=ta(a,(e=c,c=c+1|0,e));var f;if(e=55296<=b&&56319>=b&&c<d)a=f=ta(a,c),e=56320<=a&&57343>=a;var g;e?g=65536+((b&1023)<<10)+(f&1023)|0:g=b;return g};function F(a,b){this.g=a;this.h=b}m(F,v);function x(a){if(0!=a.h){var b="L"+w(ma(a.g))+";";a=a.h;for(var c="",d=0;d<a;d=d+1|0)c=w(c)+"[";return w(c)+w(b)}return ma(a.g)}F.prototype.toString=function(){return"class "+w(x(this))};function pa(a){return la(a.prototype,"$$class/0",function(){return new F(a,0)})};function za(a){var b=a;try{var c;if(c="www.google.com"===Aa(a)){var d=Ba(a)[5];c="/url"===G(d,!0)}if(c){var e=Ca(a,"q");b=e?e:Ca(a,"url")}}catch(f){if(f=ra(f),!(f instanceof A))throw f.g;}return null!=b?b:""};function G(a,b){return null==a?a:b?decodeURI(a):decodeURIComponent(a)};var Da;function Ba(a){H();a=Da.exec(a);for(var b=[],c=0;7>=c;c=c+1|0)a.length<=c||null==a[c]?b.push(null):b.push(a[c]);return b}function Aa(a){a=Ba(a);return G(a[3],!0)}
function Ca(a,b){H();var c=a.indexOf(xa(35));c=0>c?a.length:c;a:{var d=0;for(var e=b.length;0<(d=a.indexOf(b,d))&&d<c;){var f=ya(a,d-1|0);if(38==f||63==f){if((d+e|0)>=a.length)break a;f=ya(a,d+e|0);if(61==f||38==f||35==f)break a}d=d+(e+1)|0}d=-1}if(0>d)return null;e=a.indexOf(xa(38),d);if(0>e||e>c)e=c;d=d+(b.length+1)|0;b=Math.min(a.length,d);a=a.substr(b,Math.min(a.length,Math.max(d,e))-b|0);c=" ";for(b=0;0<=(b=c.indexOf("\\",b));)36==c.charCodeAt(b+1|0)?(d=w(c.substr(0,b|0))+"$",e=b=b+1|0,c=d+w(c.substr(e))):
(d=w(c.substr(0,b|0)),e=b=b+1|0,c=d+w(c.substr(e)));a=a.replace(RegExp("\\+","g"),c);return G(a,!1)}function H(){H=function(){};Da=RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#([\\S\\s]*))?$")};var Ea=/&/g,Fa=/</g,Ga=/>/g,Ha=/"/g,Ia=/'/g,Ja=/\x00/g,Ka=/[\x00&<>"']/;function La(){var a=n.navigator;return a&&(a=a.userAgent)?a:""}function I(a){return-1!=La().indexOf(a)};var Ma=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if("string"===typeof a)return"string"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};var Na=I("Trident")||I("MSIE"),Oa=I("Edge")||Na,Pa=I("Gecko")&&!(-1!=La().toLowerCase().indexOf("webkit")&&!I("Edge"))&&!(I("Trident")||I("MSIE"))&&!I("Edge"),Qa=I("Macintosh");function Ra(a){a&&"function"==typeof a.u&&a.u()};function J(){this.h=this.h;this.g=this.g}J.prototype.h=!1;J.prototype.u=function(){this.h||(this.h=!0,this.j())};J.prototype.j=function(){if(this.g)for(;this.g.length;)this.g.shift()()};function Sa(a,b,c){for(var d in a)b.call(c,a[d],d,a)};var K;function L(a,b){this.i=a===Ta&&b||"";this.j=Ua}L.prototype.h=!0;L.prototype.g=function(){return this.i};var Ua={},Ta={};function M(a,b){this.i=b===N?a:""}M.prototype.h=!0;M.prototype.g=function(){return this.i.toString()};M.prototype.toString=function(){return this.i.toString()};function O(a){return a instanceof M&&a.constructor===M?a.i:"type_error:SafeUrl"}
var Va=RegExp('^(?:audio/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font/\\w+|image/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|video/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\\w+=(?:\\w+|"[\\w;,= ]+"))*$',"i"),Wa=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Xa=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Ya(a){if(a instanceof M)return a;a="object"==typeof a&&a.h?a.g():String(a);Xa.test(a)||(a="about:invalid#zClosurez");return new M(a,N)}
var N={},Za=new M("about:invalid#zClosurez",N);var $a={};function P(a,b,c){this.i=c===$a?a:"";this.h=!0}P.prototype.g=function(){return this.i.toString()};P.prototype.toString=function(){return this.i.toString()};function ab(a,b,c,d){a=a instanceof M?a:Ya(a);b=b||n;c=c instanceof L?c instanceof L&&c.constructor===L&&c.j===Ua?c.i:"type_error:Const":c||"";return void 0!==d?b.open(O(a),c,d):b.open(O(a),c)};function Q(a,b){this.type=a;this.target=b;this.i=!1}Q.prototype.g=function(){this.i=!0};var bb=function(){if(!n.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{n.addEventListener("test",p,b),n.removeEventListener("test",p,b)}catch(c){}return a}();function R(a){Q.call(this,a?a.type:"");this.relatedTarget=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.state=null;this.pointerId=0;this.pointerType="";this.h=null;if(a){var b=this.type=a.type,c=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;var d=a.relatedTarget;if(d){if(Pa){a:{try{t(d.nodeName);var e=!0;break a}catch(f){}e=!1}e||(d=null)}}else"mouseover"==
b?d=a.fromElement:"mouseout"==b&&(d=a.toElement);this.relatedTarget=d;c?(this.clientX=void 0!==c.clientX?c.clientX:c.pageX,this.clientY=void 0!==c.clientY?c.clientY:c.pageY,this.screenX=c.screenX||0,this.screenY=c.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=
a.metaKey;this.pointerId=a.pointerId||0;this.pointerType="string"===typeof a.pointerType?a.pointerType:cb[a.pointerType]||"";this.state=a.state;this.h=a;a.defaultPrevented&&R.m.g.call(this)}}ka(R,Q);var cb={2:"touch",3:"pen",4:"mouse"};R.prototype.g=function(){R.m.g.call(this);var a=this.h;a.preventDefault?a.preventDefault():a.returnValue=!1};var S="closure_listenable_"+(1E6*Math.random()|0);var db=0;function eb(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.h=e;this.key=++db;this.g=this.o=!1}function fb(a){a.g=!0;a.listener=null;a.proxy=null;a.src=null;a.h=null};function T(a){this.src=a;this.g={};this.h=0}T.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.g[f];a||(a=this.g[f]=[],this.h++);var g;a:{for(g=0;g<a.length;++g){var h=a[g];if(!h.g&&h.listener==b&&h.capture==!!d&&h.h==e)break a}g=-1}-1<g?(b=a[g],c||(b.o=!1)):(b=new eb(b,this.src,f,!!d,e),b.o=c,a.push(b));return b};var U="closure_lm_"+(1E6*Math.random()|0),V={},gb=0;function hb(a,b,c,d,e){if(d&&d.once)return ib(a,b,c,d,e);if(Array.isArray(b)){for(var f=0;f<b.length;f++)hb(a,b[f],c,d,e);return null}c=jb(c);return a&&a[S]?a.g(b,c,q(d)?!!d.capture:!!d,e):kb(a,b,c,!1,d,e)}
function kb(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=q(e)?!!e.capture:!!e,h=lb(a);h||(a[U]=h=new T(a));c=h.add(b,c,d,g,f);if(c.proxy)return c;d=mb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)bb||(e=g),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(nb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");gb++;return c}
function mb(){function a(c){return b.call(a.src,a.listener,c)}var b=ob;return a}function ib(a,b,c,d,e){if(Array.isArray(b)){for(var f=0;f<b.length;f++)ib(a,b[f],c,d,e);return null}c=jb(c);return a&&a[S]?a.h(b,c,q(d)?!!d.capture:!!d,e):kb(a,b,c,!0,d,e)}
function pb(a){if("number"!==typeof a&&a&&!a.g){var b=a.src;if(b&&b[S])b.i(a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(nb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);gb--;if(c=lb(b)){d=a.type;if(d in c.g){var e=c.g[d],f=Ma(e,a),g;(g=0<=f)&&Array.prototype.splice.call(e,f,1);g&&(fb(a),0==c.g[d].length&&(delete c.g[d],c.h--))}0==c.h&&(c.src=null,b[U]=null)}else fb(a)}}}
function nb(a){return a in V?V[a]:V[a]="on"+a}function ob(a,b){if(a.g)a=!0;else{b=new R(b,this);var c=a.listener,d=a.h||a.src;a.o&&pb(a);a=c.call(d,b)}return a}function lb(a){a=a[U];return a instanceof T?a:null}var qb="__closure_events_fn_"+(1E9*Math.random()>>>0);function jb(a){if("function"===typeof a)return a;a[qb]||(a[qb]=function(b){return a.handleEvent(b)});return a[qb]};function W(a){J.call(this);this.l=a;this.i={}}ka(W,J);var rb=[];function sb(a){Sa(a.i,function(b,c){this.i.hasOwnProperty(c)&&pb(b)},a);a.i={}}W.prototype.j=function(){W.m.j.call(this);sb(this)};W.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented");};function tb(a,b,c,d){b=void 0===b?!1:b;c=void 0===c?!1:c;d=void 0===d?"editors":d;J.call(this);this.i=a||document.body;this.s=!!b;this.A=!!c;this.B=d;this.l=new W(this);a=ja(Ra,this.l);this.h?a():(this.g||(this.g=[]),this.g.push(a));a=this.l;b=this.i;c=this.C;d="click";Array.isArray(d)||(d&&(rb[0]=d.toString()),d=rb);for(var e=0;e<d.length;e++){var f=hb(b,d[e],c||a.handleEvent,!1,a.l||a);if(!f)break;a.i[f.key]=f}}m(tb,J);
tb.prototype.C=function(a){if(!(0!=a.h.button||Qa&&a.ctrlKey||a.i))for(var b=a.target;b&&b!=this.i;){if(b.tagName&&"a"==b.tagName.toLowerCase()){var c=b.getAttribute("href")||b.getAttributeNS("http://www.w3.org/1999/xlink","href"),d=za(c);if(c!=d){a:{b=void 0;try{b=Aa(d)}catch(u){u=ra(u);if(u instanceof A){b=!1;break a}throw u.g;}var e;if(e=null!=b){e=(wa(),va);var f=ua;b=Object.is(e,f)||null==e&&null==f?b.toLocaleLowerCase():b.toLowerCase();e=".google.com"===b.substr(b.length-11|0,11)}b=e}if(!b)if(this.A){c=
za(d);if(Object.is(c,d)||null==c&&null==d)d="//www.google.com/url?q="+w(encodeURIComponent(d)),d=w(d)+"&sa=D";d+="&source="+this.B}else d=this.s?c:d;f=d;b=void 0;c={target:"_blank",noreferrer:!0};d=window;if(f instanceof M)e=f;else{e="undefined"!=typeof f.href?f.href:String(f);if(!(e instanceof M))if(e="object"==typeof e&&e.h?e.g():String(e),Xa.test(e))e=new M(e,N);else{e=String(e);e=e.replace(/(%0A|%0D)/g,"");var g=e.match(Wa);e=g&&Va.test(g[1])?new M(e,N):null}e=e||Za}var h=void 0!==self.crossOriginIsolated;
g="strict-origin-when-cross-origin";window.Request&&(g=(new Request("/")).referrerPolicy);var vb="unsafe-url"===g;g=c.noreferrer;if(h&&g){if(vb)throw Error("Cannot use the noreferrer option on a page that sets a referrer-policy of `unsafe-url` in modern browsers!");g=!1}f=c.target||f.target;h=[];for(b in c)switch(b){case "width":case "height":case "top":case "left":h.push(b+"="+c[b]);break;case "target":case "noopener":case "noreferrer":break;default:h.push(b+"="+(c[b]?1:0))}b=h.join(",");if((I("iPhone")&&
!I("iPod")&&!I("iPad")||I("iPad")||I("iPod"))&&d.navigator&&d.navigator.standalone&&f&&"_self"!=f)c="A",b=document,c=String(c),"application/xhtml+xml"===b.contentType&&(c=c.toLowerCase()),b=c=b.createElement(c),e=e instanceof M?e:Ya(e),b.href=O(e),c.setAttribute("target",f),g&&c.setAttribute("rel","noreferrer"),b=document.createEvent("MouseEvent"),b.initMouseEvent("click",!0,!0,d,1),c.dispatchEvent(b);else if(g){if(d=ab("",d,f,b),c=O(e),d){Oa&&-1!=c.indexOf(";")&&(c="'"+c.replace(/'/g,"%27")+"'");
d.opener=null;Ka.test(c)&&(-1!=c.indexOf("&")&&(c=c.replace(Ea,"&amp;")),-1!=c.indexOf("<")&&(c=c.replace(Fa,"&lt;")),-1!=c.indexOf(">")&&(c=c.replace(Ga,"&gt;")),-1!=c.indexOf('"')&&(c=c.replace(Ha,"&quot;")),-1!=c.indexOf("'")&&(c=c.replace(Ia,"&#39;")),-1!=c.indexOf("\x00")&&(c=c.replace(Ja,"&#0;")));c='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+c+'">';if(void 0===K)if(b=null,(e=n.trustedTypes)&&e.createPolicy){try{b=e.createPolicy("goog#html",{createHTML:r,
createScript:r,createScriptURL:r})}catch(u){n.console&&n.console.error(u.message)}K=b}else K=b;c=(b=K)?b.createHTML(c):c;c=new P(c,null,$a);(d=d.document)&&d.write&&(d.write(c instanceof P&&c.constructor===P?c.i:"type_error:SafeHtml"),d.close())}}else(d=ab(e,d,f,b))&&c.noopener&&(d.opener=null);a.g();break}}b=b.parentNode}};function ub(a,b,c,d){new tb(a,void 0===b?!1:b,void 0===c?!1:c,d)}var X=["DOCS_installLinkReferrerSanitizer"],Y=n;
X[0]in Y||"undefined"==typeof Y.execScript||Y.execScript("var "+X[0]);for(var Z;X.length&&(Z=X.shift());)X.length||void 0===ub?Y[Z]&&Y[Z]!==Object.prototype[Z]?Y=Y[Z]:Y=Y[Z]={}:Y[Z]=ub;}).call(this);
</script><script type="text/javascript" nonce="2rUEBTbonHkSNhlesg6kUw">DOCS_installLinkReferrerSanitizer( undefined,  true,  true, 'docs');</script></body></html>